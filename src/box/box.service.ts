import {Injectable} from "@nestjs/common";
import {InjectModel} from "@nestjs/mongoose";
import {Model} from "mongoose";
import {Box, publicReferences} from "./schemas/box.schema";
import BasicService from "../common/service/basicService/BasicService";
import {BoxReference} from "./enum/BoxReference.enum";
import {CreateBoxDto} from "./dto/createBox.dto";
import {IServiceReturn} from "../common/service/basicService/IService";
import {BoxHelper} from "./util/boxHelper";

@Injectable()
export class BoxService {
    public constructor(
        @InjectModel(Box.name) public readonly model: Model<Box>,
        private readonly boxHelper: BoxHelper,
    ){
        this.refsInModel = publicReferences;
        this.basicService = new BasicService(model);
    }

    public readonly refsInModel: BoxReference[];
    private readonly basicService: BasicService;

    /**
     * Initialize a box for testing session by creating a box, box admin profile and player,
     * chat, as well as 2 clans with soul homes, rooms, stocks and items.
     * Notice that if clan names are not provided they will be autogenerated: player name + clan + 1/2, i.e. "John clan 1"
     * Notice that if any errors occur on any of the initialization stage, all data of the box will be removed.
     * @param boxToInit box to create
     *
     * @returns created box and all corresponding data to it on success or ServiceErrors:
     *
     * - NOT_UNIQUE if the provided adminPassword, player name or clan names already exist
     * - NOT_FOUND if the provided admin password does not exist
     * - REQUIRED if the provided input is null or undefined
     */
    public async initializeBox(boxToInit: CreateBoxDto): Promise<IServiceReturn<Box>> {
        return null;
    }

    /**
     * Creates a new box
     * @param box box to create
     * @returns created box on success or ServiceErrors:
     *
     * - REQUIRED if the provided input is null or undefined
     * - NOT_FOUND if any of the resources not found: profiles, players, clans, soul homes, stocks, rooms, chat
     * - NOT_UNIQUE if a box with provided admin password already exists
     * - validation errors if input is invalid
     */
    public async createOne(box: Box): Promise<IServiceReturn<Box>> {
        const [isBoxValid, validationErrors] = await this.boxHelper.validateBox(box);

        if(validationErrors)
            return [null, validationErrors];

        return this.basicService.createOne(box);
    }

    /**
     * Removes all data associated with the box including:
     * - clans and their soul homes, rooms, stocks
     * - profiles and players
     * - chat
     *
     * @param boxData box related data to be removed
     *
     * @returns true if references were removed or Service errors if any occurred
     */
    public async deleteBoxReferences(boxData: Partial<Box>): Promise<IServiceReturn<true>> {
        return null;
    }

    /**
     * Checks whenever a box for specified group admin is already created.
     * @param groupAdminPassword group admin password
     *
     * @return true if the box is registered or false if not
     */
    private async isBoxRegistered(groupAdminPassword: string): Promise<boolean> {
        const [box, errors] = await this.basicService.readOne<Box>({ filter: { adminPassword: groupAdminPassword } });

        return box ? true : false;
    }
}
