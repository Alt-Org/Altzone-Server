{
    "openapi": "3.0.1",
    "info": {
        "title": "Altzone API",
        "version": "1.0.0",
        "description": "This is a description of API for the Altzone game.\nThis swagger document is describing endpoint in more details and includes the request objects structure, examples, authorization rules and any other additional information.\nNotice,  that it does not include common rules and functions, since they are covered on the wikipages in GitHub",
        "x-logo": {
            "url": ""
        }
    },
    "servers": [
        {
            "url": "https://altzone.fi/api",
            "description": "Production",
            "x-last-modified": 1718905376325
        },
        {
            "url": "http://localhost:8080",
            "description": "Local",
            "x-last-modified": 1718899219797
        }
    ],
    "paths": {
        "/clan": {
            "get": {
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Clan": [
                                                    {
                                                        "_id": "667eedc9b3b5bf0f7a840ef1",
                                                        "name": "User2 clan",
                                                        "tag": "tag2",
                                                        "gameCoins": 90,
                                                        "admin_ids": [
                                                            "666720806cc90102f60bd325"
                                                        ],
                                                        "playerCount": 1,
                                                        "itemCount": 0,
                                                        "stockCount": 0,
                                                        "isOpen": true,
                                                        "id": "667eedc9b3b5bf0f7a840ef1"
                                                    },
                                                    {
                                                        "_id": "667bfec6afb8211b4bd8dbff",
                                                        "name": "User1 clan",
                                                        "tag": "tag1",
                                                        "gameCoins": 4,
                                                        "admin_ids": [
                                                            "665df7026bf5b8f670569ea4"
                                                        ],
                                                        "playerCount": 1,
                                                        "itemCount": 0,
                                                        "stockCount": 0,
                                                        "isOpen": true,
                                                        "id": "667bfec6afb8211b4bd8dbff"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Clan",
                                                "modelName": "Clan",
                                                "dataType": "Array",
                                                "dataCount": 2
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 2,
                                                "offset": 0,
                                                "itemCount": 2,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all clans",
                "description": "Read all created Clans. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "Clan object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClanUpdate"
                            },
                            "examples": {
                                "Clan": {
                                    "$ref": "#/components/examples/ClanWithId"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a clan",
                "description": "Update the Clan, which _id is specified in the body. \n\nOnly Clan admins can change the Clan's data, as well as add or remove admins. Notice that while removing Clan admins, its is not allowed to remove all of them, because Clan must have at least one admin.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for Clan admins | \n\n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClanCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Clan": {
                                                    "objectType": "ClanDto",
                                                    "_id": "667eedc9b3b5bf0f7a840ef1",
                                                    "name": "User1 clan",
                                                    "tag": "kek",
                                                    "gameCoins": 90,
                                                    "admin_ids": [
                                                        "666720806cc90102f60bd325"
                                                    ],
                                                    "playerCount": 1,
                                                    "itemCount": 0,
                                                    "stockCount": 0,
                                                    "isOpen": true
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Clan",
                                                "modelName": "Clan",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718901860622
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718901883486
                    },
                    "403": {
                        "$ref": "#/components/responses/403",
                        "x-last-modified": 1718901898221
                    },
                    "409": {
                        "$ref": "#/components/responses/409",
                        "x-last-modified": 1718902008128
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718902019444
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a clan",
                "description": "Create a new Clan. The creator of the Clan becomes its admin. Notice that if Player is creating a new Clan, he/she becomes a member of it, that means that if Player is member of some Clan it can not create a new one, before leaving the old one.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | Player can be in one Clan only at one time => if Player already is in another Clan, he/she can not create a new one | \n\n"
            }
        },
        "/profile": {
            "summary": "user profile",
            "description": "",
            "get": {
                "tags": [
                    "Profile"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Profile": {
                                                    "_id": "667ee778b3b5bf0f7a840ec9",
                                                    "username": "user1"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Profile",
                                                "modelName": "Profile",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Read logged-in user Profile data",
                "description": "Read logged-in user Profile data\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only own |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Profile"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update user Profile",
                "description": "Update logged-in user Profile data. Notice that only fields needed to be updated should be specified."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Profile"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Profile": {
                                                    "objectType": "ProfileDto",
                                                    "_id": "667ee778b3b5bf0f7a840ec9",
                                                    "username": "user6",
                                                    "Player": {
                                                        "objectType": "PlayerDto",
                                                        "_id": "667ee778b3b5bf0f7a840ecb",
                                                        "name": "User 6",
                                                        "backpackCapacity": 34,
                                                        "uniqueIdentifier": "6",
                                                        "profile_id": "667ee778b3b5bf0f7a840ec9"
                                                    }
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Profile",
                                                "modelName": "Profile",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "profile_create",
                "summary": "Create profile",
                "description": "Create a user profile with Player object associated with it. Notice, that it is also possible in some edge cases to create a Profile without Player object assosiated with it, however it is not recommended and API expects that for every Profile there is a Player object created. "
            },
            "delete": {
                "tags": [
                    "Profile"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete Profile",
                "description": "Delete logged-in user's Profile. Notice, that Profile deletion will lead removing all user data, such as Player and CustomCharacters. Since the Player object is assosiated with the Clan, user will be also removed from the Clan. Notice, that if there was nobody in the Clan the Clan with all assosiated objects will be removed. However, in case if the user was admin in this Clan and there are no other admins the user must first set at least one admin for this Clan, overwise the Profile will not be removed and 403 will be returned."
            }
        },
        "/player": {
            "get": {
                "tags": [
                    "Player"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Player": [
                                                    {
                                                        "_id": "6686cb3b71adebdb10f33ffb",
                                                        "name": "User 2",
                                                        "backpackCapacity": 654,
                                                        "uniqueIdentifier": 2,
                                                        "profile_id": "6686cb3b71adebdb10f33ff9"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Player",
                                                "modelName": "Player",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 1,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Read all players",
                "description": "Read all created Players. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "Player object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlayerUpdate"
                            },
                            "examples": {
                                "Player": {
                                    "$ref": "#/components/examples/PlayerWithId"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Player"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a player",
                "description": "Update the Player, which _id is specified in the body. Only Player, which belong to the logged-in Profile can be changed.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | only for Player owner | \n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlayerCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Player"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Player": {
                                                    "objectType": "PlayerDto",
                                                    "_id": "6686cb3b71adebdb10f33ffb",
                                                    "name": "User 2",
                                                    "backpackCapacity": 654,
                                                    "uniqueIdentifier": 2,
                                                    "profile_id": "6686cb3b71adebdb10f33ff9"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Player",
                                                "modelName": "Player",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a player for logged-in user",
                "description": "Create a new Player. This is not recommended way of creating a new Player and it should be used only in edge cases. The recommended way is to create it via /profile POST endpoint.\n\nPlayer is representing an object, which holds data related to game player. This object can be used inside the game for example while joining a Clan. Notice, that the Profile object should not be used inside the game (except for logging-in). \n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | Player can be associated with only one Profile | \n"
            }
        },
        "/player/{_id}": {
            "get": {
                "tags": [
                    "Player"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Player": {
                                                    "_id": "6686cb3b71adebdb10f33ffb",
                                                    "name": "User 2",
                                                    "backpackCapacity": 654,
                                                    "uniqueIdentifier": 2,
                                                    "profile_id": "6686cb3b71adebdb10f33ff9"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Player",
                                                "modelName": "Player",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "summary": "Get Player by _id",
                "description": "Read Player data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "delete": {
                "tags": [
                    "Player"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete Player",
                "description": "Delete Player by its _id field. Notice that only Player, which belongs to loggen-in user Profile can be deleted. In case when the Player is the only admin in some Clan and the Clan has some other Players, the Player can not be removed. User should be asked to first determine at least one admin for the Clan.\n\nAlso, it is not recommended to delete the Player since it can itroduce unexpected behaviour for the user with Profile, but without Player. The better way to remove the Player is do it via /profile DELETE.\n\nPlayer removal basically means removing all data, which is related to the Player: CustomCharacters, Clan, except for the Profile data. In the case when the Profile does not has a Player, user can only login to the system, but can not play the game.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for Player owner |"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "6686cb3b71adebdb10f33ffb"
                        }
                    },
                    "name": "_id",
                    "description": "player _id",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/clan/{_id}": {
            "get": {
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Clan": {
                                                    "_id": "667eedc9b3b5bf0f7a840ef1",
                                                    "name": "User1 clan",
                                                    "tag": "tag1",
                                                    "gameCoins": 90,
                                                    "admin_ids": [
                                                        "666720806cc90102f60bd325"
                                                    ],
                                                    "playerCount": 1,
                                                    "itemCount": 0,
                                                    "stockCount": 0,
                                                    "isOpen": true
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Clan",
                                                "modelName": "Clan",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "summary": "Get Clan by _id",
                "description": "Read Clan data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "delete": {
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete Clan",
                "description": "Delete Clan its _id field. \n\nNotice that only Clan admins can delete the Clan.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for Clan admins |"
            },
            "parameters": [
                {
                    "examples": {
                        "_id": {
                            "value": "667462842425aea94d0f66cb"
                        }
                    },
                    "name": "_id",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/clan/join": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClanJoinCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Join": {
                                                    "objectType": "JoinDto",
                                                    "clan_id": "667bfec6afb8211b4bd8dbff",
                                                    "player_id": "666720806cc90102f60bd325",
                                                    "join_message": "User 2 wants to join"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Join",
                                                "modelName": "Join",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718901860622
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718901883486
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718902019444
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Player requests join to clan",
                "description": "Request to join a Clan. \n\nNotice that if the Clan is open the Player will be joined automatically without admin approval. \n\nNotice that if the Player was in another Clan then he/she will be removed from the old one and if in this Clan was no other Players, it will be removed.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no, but for closed Clans there should be an admin approval first | \n\n"
            }
        },
        "/clan/join/leave": {
            "post": {
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718901883486
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718902019444
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Player requests leave the Clan",
                "description": "Request to leave a Clan. \n\nNotice that Player can leave any Clan without admin approval.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no | \n\n"
            }
        },
        "/clan/default": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClanCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Clan": {
                                                    "objectType": "ClanDto",
                                                    "_id": "667ef139b3b5bf0f7a840f0a",
                                                    "name": "User1 clan",
                                                    "tag": "tag1",
                                                    "gameCoins": 90,
                                                    "admin_ids": [
                                                        "666720806cc90102f60bd325"
                                                    ],
                                                    "playerCount": 1,
                                                    "itemCount": 0,
                                                    "stockCount": 0,
                                                    "isOpen": true,
                                                    "Stock": [
                                                        {
                                                            "objectType": "StockDto",
                                                            "_id": "667ef139b3b5bf0f7a840f0d",
                                                            "type": 1,
                                                            "rowCount": 5,
                                                            "columnCount": 5,
                                                            "clan_id": "667ef139b3b5bf0f7a840f0a"
                                                        }
                                                    ]
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Clan",
                                                "modelName": "Clan",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create Clan with Stock and default Items in it",
                "description": "Create a new Clan with Stock containing default Items. Notice that if the Player is already in some other Clan, then he/she can not create a new one."
            }
        },
        "/stock": {
            "get": {
                "tags": [
                    "Stock",
                    "changing"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Stock": [
                                                    {
                                                        "_id": "66894fbd4a7b6c993aed1a18",
                                                        "cellCount": 30,
                                                        "clan_id": "667bfec6afb8211b4bd8dbff"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Stock",
                                                "modelName": "Stock",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 1,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all stocks",
                "description": "Read all created Stocks of all Clans. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | \n\n## Endpoint description\n\n### General description\n\nStock is a public place of a Clan, where Items can be stored. These Items, however, can be stolen from the Clan by other Clans' members during raid. \n\n### Relations\n\nStock can belong to one Clan and Clan may have only one Stock. Stock may have many Items. Stock may belong to one Stock.\n\n### CRUD operations\n\nSince a Clan can have only one Stock, the Stock is created automatically whenever a Clan is created.\n\nStock data can be read by anybody without authentication, as well all existing Stocks list can be fetched.\n\nStock does not have any data, which can be updated by Clan members. The only field, which can be updated is a cellCount, which hold information about Stock capacity. The starting value of it is 30, but more cells can be bought from store later. The cellCount does not have a limit.\n\nStock is deleted automatically (and Items related to it) when the Clan to which it belongs to is also deleted.",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            }
        },
        "/stock/{_id}": {
            "get": {
                "tags": [
                    "Stock",
                    "changing"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Stock": {
                                                    "_id": "66894fbd4a7b6c993aed1a18",
                                                    "type": 0,
                                                    "rowCount": 4,
                                                    "columnCount": 6,
                                                    "clan_id": "667bfec6afb8211b4bd8dbff"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Stock",
                                                "modelName": "Stock",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get Stock by _id",
                "description": "Read Stock data by its _id field.\n\nNotice that everybody is able to read any Stock data.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n\n## Endpoint description\n\n### General description\n\nStock is a public place of a Clan, where Items can be stored. These Items, however, can be stolen from the Clan by other Clans' members during raid. \n\n### Relations\n\nStock can belong to one Clan and Clan may have only one Stock. Stock may have many Items. Stock may belong to one Stock.\n\n### CRUD operations\n\nSince a Clan can have only one Stock, the Stock is created automatically whenever a Clan is created.\n\nStock data can be read by anybody without authentication, as well all existing Stocks list can be fetched.\n\nStock does not have any data, which can be updated by Clan members. The only field, which can be updated is a cellCount, which hold information about Stock capacity. The starting value of it is 30, but more cells can be bought from store later. The cellCount does not have a limit.\n\nStock is deleted automatically (and Items related to it) when the Clan to which it belongs to is also deleted."
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "66894fbd4a7b6c993aed1a18"
                        }
                    },
                    "name": "_id",
                    "description": "Stock _id field",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/item/{_id}": {
            "get": {
                "tags": [
                    "Item",
                    "changing"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Item": {
                                                    "_id": "668a70ce91020196cb10d595",
                                                    "name": "item1",
                                                    "weight": 67,
                                                    "recycling": "yleinen",
                                                    "unityKey": "unity1",
                                                    "filename": "file1",
                                                    "location": [
                                                        2,
                                                        4
                                                    ],
                                                    "isFurniture": true,
                                                    "stock_id": "668953cd4a7b6c993aed1a36",
                                                    "price": 23
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Item",
                                                "modelName": "Item",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get Item by _id",
                "description": "Read Item data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n\n\n## Endpoint description\n\n### General description\n\nItems are objects, which can be placed in SoulHomes' Rooms, Stocks and Shop. Item is an object, which has its value in the game and can be bought from the Shop, stolen from the Stock or placed in safe to SoulHome's Room.\n\nItems can be obtained only from Shop and then stored in Room or a Stock.\n\nItem can be a furniture or some other kind of object. The difference between furniture and not furniture is that a furniture can be placed only on a floor. Not furniture can be placed anywhere including on top of a furniture, walls, celling and floor. This data is used in game logic only and does not affect the API in any way.\n\n### Relations\n\nItem can belong to one Room. Room can have multiple Items.\n\nItem can belong to one Stock. Stock can have multiple Items.\n\nItem can belong to Shop. Shop can have multiple Items.\n\n### CRUD operations\n\nItem can not be created by Player. It can only be bought from Shop. API creates new Items automatically.\n\nItem can be read by anyone. One Item can be accessed via its _id field. Multiple Items can be accessed by requesting them within another endpoints via \"with\" or \"all\" queries (/stock/:stock_id?with=Item), since they are mostly required together with Stock, Room or Shop data.\n\nItem can not be directly updated by Players. However, Players may move Items from one place to another. They first can buy an Item from Shop and so update Item's place by moving it to the Clan's Stock. Then they can move it from SoulHome to Stock or vice versa. Item can be bought from Shop via /stock/buy enpoint (not yet implemented). Item can be moved from Room to Stock or from Stock to Room via /item/move POST endpoint.\n\nItem can not be deleted."
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "668a70ce91020196cb10d595"
                        }
                    },
                    "name": "_id",
                    "description": "item _id field",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/soulhome": {
            "description": "",
            "get": {
                "tags": [
                    "SoulHome",
                    "changing"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "SoulHome": {
                                                    "_id": "668c0e9f9470819cf38e371c",
                                                    "name": "clan1",
                                                    "clan_id": "667bfec6afb8211b4bd8dbff"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "SoulHome",
                                                "modelName": "SoulHome",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Get SoulHome",
                "description": "## Method description\n\nGet SoulHome data for the logged-in user. \n\nIf the logged-in user is a Clan member, the SoulHome for this Clan will be returned. \n\nIf the logged-in user is not belonging to any Clan the 404 error will be returned.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no |\n\n\n## Endpoint description\n\n### General description\n\nSoulhome is a safe place for storing Clan Items (inside SoulHome's Rooms). This means, that it is possible to steal Items from the SoulHome rooms, therefore the access to CRUD operations mostly lies in hands of Clan members.\n\nSoulHome does have only one field \"name\", which is same as a Clan name.\n\n### Relations\n\nSoulHome can belong to one Clan and Clan may have only one SoulHome. SoulHome may have many Rooms. Room may belong to one SoulHome.\n\n### CRUD operations\n\nSoulHome must be created automatically when Clan is created. When SoulHome is created 30 Rooms for that SoulHome with default values must created."
            }
        },
        "/room": {
            "get": {
                "tags": [
                    "Room",
                    "changing"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Room": {
                                                    "_id": "668d6003a9292e300e94c833",
                                                    "floorType": "floor1",
                                                    "wallType": "wall1",
                                                    "isActive": false,
                                                    "roomItems": [],
                                                    "player_id": "665df7026bf5b8f670569ea4",
                                                    "soulHome_id": "667ef139b3b5bf0f7a840f2d"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Room",
                                                "modelName": "Room",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Get all Clan's Rooms",
                "description": "## Method description\n\nGet all Rooms for the logged-in user. \n\nIf the logged-in user is a Clan member, the Rooms for this Clan will be returned. \n\nIf the logged-in user is not belonging to any Clan the 404 error will be returned.\n\nIf the pagination is required, it can be used, but by  default it will return all 30 rooms at once.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no |\n| Pagination   | yes |\n| Sort   | yes |\n| Search   | yes |\n\n\n## Endpoint description\n\n### General description\n\nRoom is a place, which can safely store Items of a Clan. Items from the Room can not be stolen. \n\nRoom is closely related to its SoulHome. SoulHome consists of Rooms. \n\nRoom has an automatic behavior. Room has two statuses active and deactivated. When the Room is becoming deactivated its isActive field is taking on the value false. This should be done automatically when the deactivationTimestamp field is expired.\n\n### Relations\n\nRoom can belong to one SoulHome. SoulHome may have many Rooms.\n\nRoom can have many Items. Item may belong to one Room.\n\n### CRUD operations\n\nRooms for a SoulHome must be created automatically, when a SoulHome is created. Therefore there is no enpoint for Room creation.\n\nRoom and all Rooms can be read by Clan members, to which the Room (its SoulHome) is belonging.\n\nRoom can be updated by Clan members, to which it (its SoulHome) belongs.\n\nRoom can be deleted only automatically, when the SoulHome, to which the Room belongs is deleted."
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoomUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Room",
                    "changing"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update Room by _id",
                "description": "## Method description\n\nUpdate Room by its _id specified in the body.\n\nAny Clan member can update any Room, which (SoulHome) belongs to the Clan.\n\nIf the logged-in user is a Clan member and the Clan does have the requested Room, the Room for this Clan will be returned. \n\nIf the logged-in user is not belonging to any Clan, or Room in that Clan with provided _id is not found the 404 error will be returned.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no |\n\n\n## Endpoint description\n\n### General description\n\nRoom is a place, which can safely store Items of a Clan. Items from the Room can not be stolen. \n\nRoom is closely related to its SoulHome. SoulHome consists of Rooms. \n\nRoom has an automatic behavior. Room has two statuses active and deactivated. When the Room is becoming deactivated its isActive field is taking on the value false. This should be done automatically when the deactivationTimestamp field is expired.\n\n### Relations\n\nRoom can belong to one SoulHome. SoulHome may have many Rooms.\n\nRoom can have many Items. Item may belong to one Room.\n\n### CRUD operations\n\nRooms for a SoulHome must be created automatically, when a SoulHome is created. Therefore there is no enpoint for Room creation.\n\nRoom and all Rooms can be read by Clan members, to which the Room (its SoulHome) is belonging.\n\nRoom can be updated by Clan members, to which it (its SoulHome) belongs.\n\nRoom can be deleted only automatically, when the SoulHome, to which the Room belongs is deleted."
            }
        },
        "/itemShop": {
            "get": {
                "tags": [
                    "ItemShop"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "ItemShop": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "_id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "lastRestock": {
                                                                "type": "integer"
                                                            },
                                                            "items": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "item_id": {
                                                                            "type": "string"
                                                                        },
                                                                        "isInVoting": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "isSold": {
                                                                            "type": "boolean"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "__v": {
                                                                "type": "integer"
                                                            },
                                                            "id": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "metaData": {
                                            "type": "object",
                                            "properties": {
                                                "dataKey": {
                                                    "type": "string"
                                                },
                                                "modelName": {
                                                    "type": "string"
                                                },
                                                "dataType": {
                                                    "type": "string"
                                                },
                                                "dataCount": {
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "paginationData": {
                                            "type": "object",
                                            "properties": {
                                                "currentPage": {
                                                    "type": "integer"
                                                },
                                                "limit": {
                                                    "type": "integer"
                                                },
                                                "offset": {
                                                    "type": "integer"
                                                },
                                                "itemCount": {
                                                    "type": "integer"
                                                },
                                                "pageCount": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "ItemShop": [
                                                    {
                                                        "_id": "65feaee74ec1b78cc4afc9da",
                                                        "name": "Huonekalukauppa",
                                                        "lastRestock": 1720612774100,
                                                        "items": [
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7da",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7db",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7dc",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7dd",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7de",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7df",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e0",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e1",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e2",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e3",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e4",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e5",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e6",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e7",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e8",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e9",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ea",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7eb",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ec",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ed",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ee",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ef",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f0",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f1",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f2",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f3",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f4",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            }
                                                        ],
                                                        "__v": 2,
                                                        "id": "65feaee74ec1b78cc4afc9da"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "ItemShop",
                                                "modelName": "ItemShop",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 20,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Success, rseponse with body"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get item shops",
                "description": "The ItemShop is an object containing ShopItems. There can be only one ItemShop excisting. The ShopItem is an inner object of the ItemShop, which contains item_id (reference to an Item), isInVoting, isSold and vote_id(reference to a ClanVote).\n\nNotice that ItemShop is created automatically by an API with some default ShopItems in it. Each day ItemShop is reset, so that all default values, which was sold are restored back.\n\nNotice that it is possible to access ItemShop via this endpoint and also via /itemShop/{_id}, the response will be the same (except that this endpoint will have the ItemShop data in an array).\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | "
            }
        },
        "/itemShop/{_id}": {
            "get": {
                "tags": [
                    "ItemShop"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "ItemShop": {
                                                    "type": "object",
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "lastRestock": {
                                                            "type": "integer"
                                                        },
                                                        "items": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "item_id": {
                                                                        "type": "string"
                                                                    },
                                                                    "isInVoting": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "isSold": {
                                                                        "type": "boolean"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "__v": {
                                                            "type": "integer"
                                                        },
                                                        "id": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "metaData": {
                                            "type": "object",
                                            "properties": {
                                                "dataKey": {
                                                    "type": "string"
                                                },
                                                "modelName": {
                                                    "type": "string"
                                                },
                                                "dataType": {
                                                    "type": "string"
                                                },
                                                "dataCount": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "ItemShop": {
                                                    "_id": "65feaee74ec1b78cc4afc9da",
                                                    "name": "Huonekalukauppa",
                                                    "lastRestock": 1720612774100,
                                                    "items": [
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7da",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7db",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7dc",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7dd",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7de",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7df",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e0",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e1",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e2",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e3",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e4",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e5",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e6",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e7",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e8",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e9",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ea",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7eb",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ec",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ed",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ee",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ef",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f0",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f1",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f2",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f3",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f4",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        }
                                                    ],
                                                    "__v": 2,
                                                    "id": "65feaee74ec1b78cc4afc9da"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "ItemShop",
                                                "modelName": "ItemShop",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Success, rseponse with body"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get item shop",
                "description": "The ItemShop is an object containing ShopItems. There can be only one ItemShop excisting. The ShopItem is an inner object of the ItemShop, which contains item_id (reference to an Item), isInVoting, isSold and vote_id(reference to a ClanVote).\n\nNotice that ItemShop is created automatically by an API with some default ShopItems in it. Each day ItemShop is reset, so that all default values, which was sold are restored back.\n\nNotice that it is possible to access ItemShop via this endpoint and also via /itemShop, the response will be the same (except that this endpoint will have the ItemShop data as an object).\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |"
            },
            "parameters": [
                {
                    "name": "_id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/chat": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Chat": [
                                                    {
                                                        "_id": "66912712d191c865ab53da8a",
                                                        "name": "Chat 1",
                                                        "__v": 0,
                                                        "id": "66912712d191c865ab53da8a"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Chat",
                                                "modelName": "Chat",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 1,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all existing chats",
                "description": "Read all created Chats. Remember about the pagination.\n\nNotice, that use of messages array is not advised and can be removed at some point in the future. For accessing messages of the Chat please use the /chat/:_id/message endpoint.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "Chat object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChatUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a chat",
                "description": "Update the Chat, which _id is specified in the body.\n\nNotice that currently anybody is able to change any Chat.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | no | \n| Authorization   | no | \n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChatCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Chat": {
                                                    "name": "Chat 1",
                                                    "_id": "66912712d191c865ab53da8a",
                                                    "messages": [],
                                                    "__v": 0,
                                                    "id": "66912712d191c865ab53da8a"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Chat",
                                                "modelName": "Chat",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a chat",
                "description": "Create a new Chat. The Chat is an object containing messages.\n\nNotice, that currently there is no restrictions on who can create a Chat.\n\nNotice that the Message objects are inner objects of Chat and can not be used enewhere else than in the Chat. There is also no separate collection for the Message in the DB.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | no | \n| Authorization   | no | \n"
            }
        },
        "/chat/{_id}": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Chat": {
                                                    "_id": "66912712d191c865ab53da8a",
                                                    "name": "Chat 1",
                                                    "__v": 0,
                                                    "id": "66912712d191c865ab53da8a"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Chat",
                                                "modelName": "Chat",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get Chat by _id",
                "description": "Read Chat data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "delete": {
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete Chat",
                "description": "Delete Chat by its _id field. \n\nNotice that currently anybody can delete any Chat.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "654fad58fd96261edd2e096f"
                        }
                    },
                    "name": "_id",
                    "description": "Chat _id field",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/chat/{_id}/messages": {
            "get": {
                "tags": [
                    "Message"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Chat": [
                                                    {
                                                        "id": 15,
                                                        "senderUsername": "user1",
                                                        "content": "message 15",
                                                        "feeling": 1
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Chat",
                                                "modelName": "Chat",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 20,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all messages from the Chat",
                "description": "Read all messages of specified Chat. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Message"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a message",
                "description": "Create a new Message. Message represent the object of message sent by a Player.\n\nNotice that currently there are no authorization required.\n\nNotice, that the messages does not have an usual _id field generated by data base. Instead the Photon id should be used.\n\nNotice that the messages is contained in the array of a Chat collection.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | no | \n| Authorization   | no |\n"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "66912712d191c865ab53da8a"
                        }
                    },
                    "name": "_id",
                    "description": "Chat _id, with which the message is associated",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/customCharacter": {
            "get": {
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "CustomCharacter": {
                                                    "objectType": "CustomCharacterDto",
                                                    "_id": "66939de4db98c5ba6bb192f1",
                                                    "unityKey": "somekey12",
                                                    "name": "My custom5",
                                                    "speed": 37,
                                                    "resistance": 40,
                                                    "attack": 55,
                                                    "defence": 14,
                                                    "characterClass_id": "66939d9f9fdbf76f01d5dbd5",
                                                    "player_id": "665df7026bf5b8f670569ea4"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "CustomCharacter",
                                                "modelName": "CustomCharacter",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all custom characters",
                "description": "Read all custom characters. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "CustomCharacter object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomCharacterUpdate"
                            },
                            "examples": {
                                "CustomCharacter": {
                                    "$ref": "#/components/examples/CustomCharacterWithId"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "200": {
                        "description": "Success, no body"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a custom character",
                "description": "Update the CustomCharacter, which _id is specified in the body.\n\nOnly the Player, that owns the CustomCharacter can change it.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | only for character owner |\n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomCharacterCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "CustomCharacter": {
                                                    "objectType": "CustomCharacterDto",
                                                    "_id": "66939de4db98c5ba6bb192f1",
                                                    "unityKey": "somekey12",
                                                    "name": "My custom5",
                                                    "speed": 37,
                                                    "resistance": 40,
                                                    "attack": 55,
                                                    "defence": 14,
                                                    "characterClass_id": "66939d9f9fdbf76f01d5dbd5",
                                                    "player_id": "665df7026bf5b8f670569ea4"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "CustomCharacter",
                                                "modelName": "CustomCharacter",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a custom character",
                "description": "Create a new CustomCharacter. CustomCharacter represents a character of the Player. Player can have many CustomCharacters, CustomCharacter can belong to only one Player.\n\nNotice, that Player can create CustomCharacters only for himself/herself not for other Players.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | only own |\n"
            }
        },
        "/customCharacter/{_id}": {
            "get": {
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "CustomCharacter": {
                                                    "objectType": "CustomCharacterDto",
                                                    "_id": "66939de4db98c5ba6bb192f1",
                                                    "unityKey": "somekey12",
                                                    "name": "My custom5",
                                                    "speed": 37,
                                                    "resistance": 40,
                                                    "attack": 55,
                                                    "defence": 14,
                                                    "characterClass_id": "66939d9f9fdbf76f01d5dbd5",
                                                    "player_id": "665df7026bf5b8f670569ea4"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "CustomCharacter",
                                                "modelName": "CustomCharacter",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get CustomCharacter by id",
                "description": "Read CustomCharacter data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no |"
            },
            "delete": {
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "200": {
                        "description": "Success, no body"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete CustomCharacter",
                "description": "Delete CustomCharacter by its _id field. Notice that only the CustomCharacter owner can delete the CustomCharacter.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for CustomCharacter |"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "66939de4db98c5ba6bb192f1"
                        }
                    },
                    "name": "_id",
                    "description": "CustomCharacter _id field",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/room/{_id}": {
            "get": {
                "tags": [
                    "Room",
                    "changing"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Room": {
                                                    "_id": "668d6003a9292e300e94c833",
                                                    "floorType": "floor1",
                                                    "wallType": "wall1",
                                                    "isActive": false,
                                                    "roomItems": [],
                                                    "player_id": "665df7026bf5b8f670569ea4",
                                                    "soulHome_id": "667ef139b3b5bf0f7a840f2d"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Room",
                                                "modelName": "Room",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Get Room by _id",
                "description": "## Method description\n\nGet Room by its _id. \n\nIf the logged-in user is a Clan member and the Clan does have the requested Room, the Room for this Clan will be returned. \n\nIf the logged-in user is not belonging to any Clan, or Room in that Clan with provided _id is not found the 404 error will be returned.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no |\n\n\n## Endpoint description\n\n### General description\n\nRoom is a place, which can safely store Items of a Clan. Items from the Room can not be stolen. \n\nRoom is closely related to its SoulHome. SoulHome consists of Rooms. \n\nRoom has an automatic behavior. Room has two statuses active and deactivated. When the Room is becoming deactivated its isActive field is taking on the value false. This should be done automatically when the deactivationTimestamp field is expired.\n\n### Relations\n\nRoom can belong to one SoulHome. SoulHome may have many Rooms.\n\nRoom can have many Items. Item may belong to one Room.\n\n### CRUD operations\n\nRooms for a SoulHome must be created automatically, when a SoulHome is created. Therefore there is no enpoint for Room creation.\n\nRoom and all Rooms can be read by Clan members, to which the Room (its SoulHome) is belonging.\n\nRoom can be updated by Clan members, to which it (its SoulHome) belongs.\n\nRoom can be deleted only automatically, when the SoulHome, to which the Room belongs is deleted."
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "667ee778b3b5bf0f7a840ec9"
                        }
                    },
                    "name": "_id",
                    "description": "Room _id",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/room/activate": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "room_ids"
                                ],
                                "type": "object",
                                "properties": {
                                    "room_ids": {
                                        "description": "List of Room _ids to activate",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": [
                                            "64df3aad42cbaf850a3f891f"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Room",
                    "in-development"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Activate the Room by _id",
                "description": "## Method description\n\nActivate the specified Rooms.\n\nIf Room _id specified in the room_ids field does not belong to logged-in user's Clan (SoulHome), it will be ignored. However it will return 404 if non of the Room _ids does not belong to the Clan. \n\n\n## Endpoint description\n\n### General description\n\nRoom is a place, which can safely store Items of a Clan. Items from the Room can not be stolen. \n\nRoom is closely related to its SoulHome. SoulHome consists of Rooms. \n\nRoom has an automatic behavior. Room has two statuses active and deactivated. When the Room is becoming deactivated its isActive field is taking on the value false. This should be done automatically when the deactivationTimestamp field is expired.\n\n### Relations\n\nRoom can belong to one SoulHome. SoulHome may have many Rooms.\n\nRoom can have many Items. Item may belong to one Room.\n\n### CRUD operations\n\nRooms for a SoulHome must be created automatically, when a SoulHome is created. Therefore there is no enpoint for Room creation.\n\nRoom and all Rooms can be read by Clan members, to which the Room (its SoulHome) is belonging.\n\nRoom can be updated by Clan members, to which it (its SoulHome) belongs.\n\nRoom can be deleted only automatically, when the SoulHome, to which the Room belongs is deleted."
            }
        },
        "/stock/steal": {
            "post": {
                "requestBody": {
                    "description": "Items to be stolen",
                    "content": {
                        "application/json": {
                            "examples": {
                                "1": {
                                    "value": {
                                        "steal_token": "some_token",
                                        "item_ids": [
                                            "668a765091020196cb10d5a3",
                                            "668a765091020196cb10d5a3"
                                        ],
                                        "room_is": "668a765091020196cb10d5a3"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Stock",
                    "in-development"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Steal Items from another Clan",
                "description": "Steal Items from the loser Clan's Stock. The stolen Items will be automatically added to a specified Room of the winners Clan's SoulHome.\n\nNotice that first a steal token must be requested by winner player(s) from the /gameData/battle POST endpoint with body type \"result\".\n\nRequests without the steal token or with an expired token will get 403 as a response.\n\nNotice that only found Items will be stolen and all not found Items will be ignored. \n\n## Endpoint description\n\n### General description\n\nStock is a public place of a Clan, where Items can be stored. These Items, however, can be stolen from the Clan by other Clans' members during raid. \n\n### Relations\n\nStock can belong to one Clan and Clan may have only one Stock. Stock may have many Items. Stock may belong to one Stock.\n\n### CRUD operations\n\nSince a Clan can have only one Stock, the Stock is created automatically whenever a Clan is created.\n\nStock data can be read by anybody without authentication, as well all existing Stocks list can be fetched.\n\nStock does not have any data, which can be updated by Clan members. The only field, which can be updated is a cellCount, which hold information about Stock capacity. The starting value of it is 30, but more cells can be bought from store later. The cellCount does not have a limit.\n\nStock is deleted automatically (and Items related to it) when the Clan to which it belongs to is also deleted."
            }
        },
        "/gameData/battle": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "result": {
                                    "value": {
                                        "type": "result",
                                        "winner_player_id": "667bfec6afb8211b4bd8dbff",
                                        "loser_player_id": "397bfec6adb8211b4bd8dbe0"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "GameData",
                    "in-development"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "examples": {
                                    "result": {
                                        "value": {
                                            "steal_token": "temporary_token_to_use_for_/room/steal",
                                            "stock_id": "667ee778b3b5bf0f7a840ec9",
                                            "clan_id": "668d6003a9292e300e94c833"
                                        }
                                    }
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Inform API about battle",
                "description": "Enpoint for notifying the API about battle events or any other data.\n\nNotice, that the field type is required and determines the type of the data.\n\nNotice that the type also determines shape of the body. Examples, for each type can be found in request examples section.\n\n## Type field\n\n### result\n\nResult of the battle, only members of the winning team should send this data.\n\nAs a response an access token will be returned, which can be used when stealing Items from losed Clan's Stock. Notice that the steal token will expire after some period of time. \n\nThe steal token can be used only by the winner's Clan's members for the loser's Clan Stock."
            }
        },
        "/item/move": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "examples": {
                                "1": {
                                    "value": {
                                        "item_id": "397bfec6adb8211b4bd8dbe0",
                                        "moveTo": "Stock",
                                        "destination_id": "667bfec6afb8211b4bd8dbff"
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Item",
                    "in-development"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "summary": "Move Item",
                "description": "Move Item from Stock to Room or from Room to Stock\n\nNotice that Clan members can move only own Clan Items and a member is trying to move other Clan's Item the 404 will be returned.\n\nNotice that if an Item need to be moved to a Stock then there is no need to specify the destination_id field, since Clan can have only one Stock.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no |\n\n## Endpoint description\n\n### General description\n\nItems are objects, which can be placed in SoulHomes' Rooms, Stocks and Shop. Item is an object, which has its value in the game and can be bought from the Shop, stolen from the Stock or placed in safe to SoulHome's Room.\n\nItems can be obtained only from Shop and then stored in Room or a Stock.\n\nItem can be a furniture or some other kind of object. The difference between furniture and not furniture is that a furniture can be placed only on a floor. Not furniture can be placed anywhere including on top of a furniture, walls, celling and floor. This data is used in game logic only and does not affect the API in any way.\n\n### Relations\n\nItem can belong to one Room. Room can have multiple Items.\n\nItem can belong to one Stock. Stock can have multiple Items.\n\nItem can belong to Shop. Shop can have multiple Items.\n\n### CRUD operations\n\nItem can not be created by Player. It can only be bought from Shop. API creates new Items automatically.\n\nItem can be read by anyone. One Item can be accessed via its _id field. Multiple Items can be accessed by requesting them within another endpoints via \"with\" or \"all\" queries (/stock/:stock_id?with=Item), since they are mostly required together with Stock, Room or Shop data.\n\nItem can not be directly updated by Players. However, Players may move Items from one place to another. They first can buy an Item from Shop and so update Item's place by moving it to the Clan's Stock. Then they can move it from SoulHome to Stock or vice versa. Item can be bought from Shop via /stock/buy enpoint (not yet implemented). Item can be moved from Room to Stock or from Stock to Room via /item/move POST endpoint.\n\nItem can not be deleted."
            }
        },
        "/itemShop/buy": {
            "post": {
                "tags": [
                    "ItemShop",
                    "in-development"
                ],
                "responses": {
                    "501": {
                        "description": "Not implemented"
                    }
                },
                "summary": "Buy an Item from Shop"
            }
        }
    },
    "components": {
        "schemas": {
            "200": {
                "description": "Found object(s). The response objects has three fields: data, metaData and paginationData.\nThe data has the requested data. It has an object or array, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.\n\nThe paginationData is the data for pagination. Only on GET requests, when reading many objects\n",
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "metaData": {
                        "type": "object",
                        "properties": {
                            "dataKey": {
                                "description": "collection name",
                                "type": "string"
                            },
                            "modelName": {
                                "description": "model name, usually same as dataKey",
                                "type": "string"
                            },
                            "dataType": {
                                "description": "Object or Array",
                                "type": "string"
                            },
                            "dataCount": {
                                "description": "1 for Object dataType and length if Array",
                                "type": "integer"
                            }
                        }
                    },
                    "paginationData": {
                        "type": "object",
                        "properties": {
                            "currentPage": {
                                "description": "The current page number",
                                "type": "integer"
                            },
                            "limit": {
                                "description": "The limit of items per page",
                                "type": "integer"
                            },
                            "offset": {
                                "description": "The offset of items",
                                "type": "integer"
                            },
                            "itemCount": {
                                "description": "The total number of items",
                                "type": "integer"
                            },
                            "pageCount": {
                                "description": "The total number of pages",
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "201": {
                "description": "Created object. The response objects has two fields: data, metaData.\n\nThe data has the created object data. It has an object inside, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in the data object.",
                "required": [
                    "data",
                    "metaData"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "metaData": {
                        "type": "object",
                        "properties": {
                            "dataKey": {
                                "description": "collection name",
                                "type": "string"
                            },
                            "modelName": {
                                "description": "model name",
                                "type": "string"
                            },
                            "dataType": {
                                "description": "always has Object value",
                                "type": "string"
                            },
                            "dataCount": {
                                "description": "always has 1 value",
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "APIError": {
                "description": "API error",
                "type": "object",
                "properties": {
                    "statusCode": {
                        "description": "The HTTP status code",
                        "type": "integer",
                        "example": 404
                    },
                    "message": {
                        "description": "The error message",
                        "type": "string",
                        "example": "Cannot GET /api/profile"
                    },
                    "error": {
                        "description": "The error name",
                        "type": "string",
                        "example": "Not Found"
                    }
                },
                "x-last-modified": 1718798371474
            },
            "APIConflictError": {
                "description": "API error",
                "required": [],
                "type": "object",
                "properties": {
                    "statusCode": {
                        "description": "The HTTP status code",
                        "type": "integer",
                        "example": 400
                    },
                    "message": {
                        "description": "An array of error messages",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "password must be a string"
                        ]
                    },
                    "error": {
                        "description": "The error name",
                        "type": "string",
                        "example": "Bad Request"
                    }
                },
                "x-last-modified": 1718798493583
            },
            "ProfileCreate": {
                "type": "object",
                "properties": {
                    "username": {
                        "description": "The username for the Profile, unique",
                        "type": "string",
                        "example": "user1"
                    },
                    "password": {
                        "description": "The password for the Profile",
                        "type": "string",
                        "example": "my_password"
                    },
                    "Player": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "description": "The name of the Player, unique",
                                "type": "string",
                                "example": "User 1"
                            },
                            "backpackCapacity": {
                                "description": "The capacity of the Player's backpack",
                                "type": "integer",
                                "example": 453
                            },
                            "uniqueIdentifier": {
                                "description": "The identifier for the player, unique",
                                "type": "string",
                                "example": "1"
                            }
                        }
                    }
                }
            },
            "ClanUpdate": {
                "required": [
                    "_id"
                ],
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the clan to be updated",
                        "type": "string",
                        "example": "667462842425aea94d0f66cb"
                    },
                    "gameCoins": {
                        "description": "The number of clan coins",
                        "type": "integer",
                        "example": 45
                    },
                    "tag": {
                        "description": "The tag associated with the clan",
                        "type": "string",
                        "example": "my_tag"
                    },
                    "isOpen": {
                        "description": "whenever the clan is open or closed",
                        "type": "boolean",
                        "example": true
                    },
                    "admin_idsToDelete": {
                        "description": "List of admin _ids to delete",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "64df3aad42cbaf850a3f891f"
                        ]
                    },
                    "admin_idsToAdd": {
                        "description": "List of admin _ids to add",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "64df3aad42cbaf850a3f891f"
                        ]
                    }
                }
            },
            "JoinClanReq": {
                "description": "Clan joining request by Player",
                "required": [
                    "clan_id",
                    "player_id"
                ],
                "type": "object",
                "properties": {
                    "clan_id": {
                        "description": "which Clan to join",
                        "type": "string"
                    },
                    "player_id": {
                        "description": "who want to join the Clan",
                        "type": "string"
                    },
                    "join_message": {
                        "description": "optional for open Clans",
                        "type": "string"
                    }
                },
                "example": {
                    "clan_id": "667462842425aea94d0f66cb",
                    "player_id": "666720806cc90102f60bd325",
                    "join_message": "User 2 wants to join"
                }
            },
            "ProfileUpdate": {
                "type": "object",
                "properties": {
                    "username": {
                        "description": "The username for the Profile, unique",
                        "type": "string",
                        "example": "user1"
                    },
                    "password": {
                        "description": "The password for the Profile",
                        "type": "string",
                        "example": "my_password"
                    }
                }
            },
            "200_one": {
                "description": "Found object. The response objects has two fields: data and metaData.\nThe data has the requested data. It has an object inside, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.",
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "metaData": {
                        "type": "object",
                        "properties": {
                            "dataKey": {
                                "description": "collection name",
                                "type": "string"
                            },
                            "modelName": {
                                "description": "model name",
                                "type": "string"
                            },
                            "dataType": {
                                "description": "always has Object value",
                                "type": "string"
                            },
                            "dataCount": {
                                "description": "always has 1 value",
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "PlayerCreate": {
                "description": "",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the Player, unique",
                        "type": "string",
                        "example": "User 1"
                    },
                    "uniqueIdentifier": {
                        "description": "The identifier for the Player, unique",
                        "type": "string",
                        "example": "1"
                    },
                    "backpackCapacity": {
                        "description": "The capacity of the Player's backpack",
                        "type": "integer",
                        "example": 34
                    },
                    "profile_id": {
                        "description": "The id of the associated Profile",
                        "type": "string",
                        "example": "6686cac271adebdb10f33fee"
                    }
                }
            },
            "PlayerUpdate": {
                "description": "",
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the Player, readonly",
                        "type": "string",
                        "example": "6686cb3b71adebdb10f33ffb"
                    },
                    "name": {
                        "description": "The name of the Player, unique",
                        "type": "string",
                        "example": "User 1"
                    },
                    "uniqueIdentifier": {
                        "description": "The identifier for the Player, unique",
                        "type": "string",
                        "example": "1"
                    },
                    "backpackCapacity": {
                        "description": "The capacity of the Player's backpack",
                        "type": "integer",
                        "example": 34
                    },
                    "profile_id": {
                        "description": "The id of the associated Profile",
                        "type": "string",
                        "example": "6686cac271adebdb10f33fee"
                    }
                }
            },
            "ClanCreate": {
                "required": [
                    "name",
                    "tag",
                    "gameCoins"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "name of the clan, unique",
                        "type": "string",
                        "example": "my_clan"
                    },
                    "gameCoins": {
                        "description": "amount of clan coins",
                        "default": 0,
                        "type": "integer",
                        "example": 23
                    },
                    "tag": {
                        "description": "amount of clan coins",
                        "type": "string",
                        "example": "my_tag"
                    },
                    "isOpen": {
                        "description": "whenever the clan is open or closed",
                        "default": true,
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "ClanJoinCreate": {
                "required": [
                    "clan_id",
                    "player_id"
                ],
                "type": "object",
                "properties": {
                    "clan_id": {
                        "description": "the Clan _id which player want to join",
                        "type": "string",
                        "example": "667bfec6afb8211b4bd8dbff"
                    },
                    "player_id": {
                        "description": "the Player _id who want to join",
                        "type": "integer",
                        "example": "666720806cc90102f60bd325"
                    },
                    "join_message": {
                        "description": "optional message for joining request (for closed Clans only)",
                        "type": "string",
                        "example": "User 2 wants to join"
                    }
                }
            },
            "ClanJoinUpdate": {
                "required": [
                    "_id"
                ],
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "the request _id, to be updated",
                        "type": "string",
                        "example": "666720806cc90102f60bd325"
                    },
                    "clan_id": {
                        "description": "the Clan _id which player want to join",
                        "type": "string",
                        "example": "667bfec6afb8211b4bd8dbff"
                    },
                    "player_id": {
                        "description": "the Player _id who want to join",
                        "type": "integer",
                        "example": "666720806cc90102f60bd325"
                    },
                    "join_message": {
                        "description": "optional message for joining request (for closed Clans only)",
                        "type": "string",
                        "example": "User 2 wants to join"
                    }
                }
            },
            "RoomUpdate": {
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the Room, readonly",
                        "type": "string",
                        "example": "668d6003a9292e300e94c833"
                    },
                    "floorType": {
                        "description": "The type of the floor in the room",
                        "type": "string",
                        "example": "floor1"
                    },
                    "wallType": {
                        "description": "The type of the wall in the room",
                        "type": "string",
                        "example": "wall1"
                    },
                    "isActive": {
                        "description": "Indicates whether the room is active or deactivated",
                        "type": "boolean",
                        "example": false
                    },
                    "deactivationTimestamp": {
                        "description": "Indicates when the Room will be deactivated",
                        "type": "number",
                        "example": 1721927762
                    },
                    "isLift": {
                        "description": "Indicates whether the room has lift or staicases",
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "ChatCreate": {
                "description": "Update an existing Chat",
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the Chat, readonly",
                        "type": "string",
                        "example": "66912712d191c865ab53da8a"
                    },
                    "name": {
                        "description": "The name of the chat",
                        "type": "string",
                        "example": "Chat 1"
                    },
                    "messages": {
                        "description": "List of messages in the chat",
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "example": []
                    }
                }
            },
            "ChatUpdate": {
                "description": "Create a new Chat",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the chat",
                        "type": "string",
                        "example": "Chat 1"
                    }
                }
            },
            "MessageCreate": {
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The photon ID of the message",
                        "type": "integer",
                        "example": 15
                    },
                    "senderUsername": {
                        "description": "The username of the message sender",
                        "type": "string",
                        "example": "user1"
                    },
                    "content": {
                        "description": "The content of the message",
                        "type": "string",
                        "example": "message 15"
                    },
                    "feeling": {
                        "description": "The feeling associated with the message (enum from 1-3)",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "CustomCharacterCreate": {
                "description": "",
                "required": [
                    "unityKey",
                    "name",
                    "speed",
                    "resistance",
                    "attack",
                    "defence",
                    "characterClass_id",
                    "player_id"
                ],
                "type": "object",
                "properties": {
                    "unityKey": {
                        "description": "The Unity key of the custom character",
                        "type": "string",
                        "example": "somekey12"
                    },
                    "name": {
                        "description": "unique, The name of the custom character",
                        "type": "string",
                        "example": "My custom5"
                    },
                    "speed": {
                        "description": "The speed attribute of the custom character",
                        "type": "integer",
                        "example": 37
                    },
                    "resistance": {
                        "description": "The resistance attribute of the custom character",
                        "type": "integer",
                        "example": 40
                    },
                    "attack": {
                        "description": "The attack attribute of the custom character",
                        "type": "integer",
                        "example": 55
                    },
                    "defence": {
                        "description": "The defence attribute of the custom character",
                        "type": "integer",
                        "example": 14
                    },
                    "characterClass_id": {
                        "description": "reference, The ID of the character class",
                        "type": "string",
                        "example": "66939d9f9fdbf76f01d5dbd5"
                    },
                    "player_id": {
                        "description": "reference, The ID of the player",
                        "type": "string",
                        "example": "665df7026bf5b8f670569ea4"
                    }
                }
            },
            "CustomCharacterUpdate": {
                "description": "",
                "required": [
                    "_id"
                ],
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The CustomCharacter _id to update",
                        "type": "string",
                        "example": "somekey12"
                    },
                    "unityKey": {
                        "description": "The Unity key of the custom character",
                        "type": "string",
                        "example": "somekey12"
                    },
                    "name": {
                        "description": "unique, The name of the custom character",
                        "type": "string",
                        "example": "My custom5"
                    },
                    "speed": {
                        "description": "The speed attribute of the custom character",
                        "type": "integer",
                        "example": 37
                    },
                    "resistance": {
                        "description": "The resistance attribute of the custom character",
                        "type": "integer",
                        "example": 40
                    },
                    "attack": {
                        "description": "The attack attribute of the custom character",
                        "type": "integer",
                        "example": 55
                    },
                    "defence": {
                        "description": "The defence attribute of the custom character",
                        "type": "integer",
                        "example": 14
                    },
                    "characterClass_id": {
                        "description": "reference, The ID of the character class",
                        "type": "string",
                        "example": "66939d9f9fdbf76f01d5dbd5"
                    },
                    "player_id": {
                        "description": "reference, The ID of the player",
                        "type": "string",
                        "example": "665df7026bf5b8f670569ea4"
                    }
                }
            }
        },
        "responses": {
            "200": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Found object(s). The response objects has three fields: data, metaData and paginationData.\nThe data has the requested data. It has an object or array, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.\n\nThe paginationData is the data for pagination. Only on GET requests, when reading many objects\n",
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                },
                                "metaData": {
                                    "type": "object",
                                    "properties": {
                                        "dataKey": {
                                            "description": "The key in the data object",
                                            "type": "string",
                                            "example": "Clan"
                                        },
                                        "modelName": {
                                            "description": "The name of the model class in data object",
                                            "type": "string",
                                            "example": "Clan"
                                        },
                                        "dataType": {
                                            "description": "The type of the data: Array or Object",
                                            "type": "string",
                                            "example": "Array"
                                        },
                                        "dataCount": {
                                            "description": "The count of data items(dataType is Array)",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                },
                                "paginationData": {
                                    "type": "object",
                                    "properties": {
                                        "currentPage": {
                                            "description": "The current page number",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "limit": {
                                            "description": "The limit of items per page",
                                            "type": "integer",
                                            "example": 20
                                        },
                                        "offset": {
                                            "description": "The offset of items",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "itemCount": {
                                            "description": "The total number of items",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "pageCount": {
                                            "description": "The total number of pages",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Success request, response with body. [Here is more about GET requests](https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests))"
            },
            "201": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Created object. The response objects has two fields: data, metaData.\n\nThe data has the created object data. It has an object inside, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.",
                            "required": [],
                            "type": "object"
                        }
                    }
                },
                "description": "Created, response for POST requests with body"
            },
            "204": {
                "description": "Successful request, response with no body"
            },
            "400": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIConflictError"
                        },
                        "example": {
                            "statusCode": 400,
                            "message": [
                                "password must be a string"
                            ],
                            "error": "Bad Request"
                        }
                    }
                },
                "description": "Validation error. Some of the fields are not specified, have wrong data types or any over validation problem",
                "x-last-modified": 1718798714047
            },
            "401": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": {
                            "statusCode": 401,
                            "message": "The access token is not provided. Please add `authorization` field with access token(in bearer token form): `Bearer access-token-here` to request header. The access token you can get from /auth endpoint",
                            "error": "Unauthorized"
                        }
                    }
                },
                "description": "Not authenticated. The Authorization header is not specified or the token is expired. [Here is more about auth](https://github.com/Alt-Org/Altzone-Server/wiki/2.-Authentication-and-authorization)"
            },
            "403": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": {
                            "statusCode": 403,
                            "message": "The logged-in user has no permission to execute update_request action",
                            "error": "Forbidden"
                        }
                    }
                },
                "description": "No permission. The logged-in user has no permission to execute the action. [Here is more about auth](https://github.com/Alt-Org/Altzone-Server/wiki/2.-Authentication-and-authorization)"
            },
            "404": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": {
                            "statusCode": 404,
                            "message": "Can not find any Chat instances",
                            "error": "Not Found"
                        }
                    }
                },
                "description": "Not found. No object(s) found"
            },
            "409": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIConflictError"
                        },
                        "example": {
                            "statusCode": 409,
                            "message": [
                                "Field 'username' with value 'user1' already exists"
                            ],
                            "error": "Conflict"
                        }
                    }
                },
                "description": "Some of the fields are not unique "
            },
            "500": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": {
                            "statusCode": 500,
                            "message": "Internal server error"
                        }
                    }
                },
                "description": "Unexpected error happened. [Please create a new issue here](https://github.com/Alt-Org/Altzone-Server/issues) and specify the endpoint, HTTP method and description if u have any",
                "x-last-modified": 1718799573835
            },
            "200_one": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Found object. The response objects has two fields: data and metaData.\nThe data has the requested data. It has an object inside, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.",
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                },
                                "metaData": {
                                    "type": "object",
                                    "properties": {
                                        "dataKey": {
                                            "description": "The key in the data object",
                                            "type": "string",
                                            "example": "Clan"
                                        },
                                        "modelName": {
                                            "description": "The name of the model class in data object",
                                            "type": "string",
                                            "example": "Clan"
                                        },
                                        "dataType": {
                                            "description": "The type of the data: Array or Object",
                                            "type": "string",
                                            "example": "Object"
                                        },
                                        "dataCount": {
                                            "description": "The count of data items(dataType is Array)",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Success request, response with body. [Here is more about GET requests](https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests))"
            }
        },
        "parameters": {
            "_id": {
                "deprecated": false,
                "name": "_id",
                "description": "_id of the object",
                "in": "path",
                "required": true,
                "x-last-modified": 1718961163935
            }
        },
        "examples": {
            "BattleCharacterNoId": {
                "value": {
                    "characterClass_id": "6480a26287b5e6ba2a0f630a",
                    "customCharacter_id": "6480a27887b5e6ba2a0f630d"
                }
            },
            "BattleCharacterWithId": {
                "value": {
                    "_id": "648acf3a409da618287a1ca1",
                    "unityKey": "somekey",
                    "name": "My custom1",
                    "resistance": 56,
                    "speed": 10,
                    "attack": 28,
                    "defence": 10,
                    "characterClassName": "my char",
                    "gestaltCycle": 1,
                    "characterClass_id": "648acec6409da618287a1c8e",
                    "customCharacter_id": "648acf23409da618287a1c98"
                }
            },
            "CharacterClassNoId": {
                "value": {
                    "name": "my char",
                    "gestaltCycle": 1,
                    "speed": 23,
                    "resistance": 45,
                    "attack": 10,
                    "defence": 12
                }
            },
            "CharacterClassWithId": {
                "value": {
                    "_id": "648095322a99de2e3bdee480",
                    "name": "my char",
                    "gestaltCycle": 1,
                    "speed": 23,
                    "resistance": 45,
                    "attack": 10,
                    "defence": 12
                }
            },
            "ClanNoId": {
                "value": {
                    "name": "clan",
                    "gameCoins": 260,
                    "tag": "some tag"
                }
            },
            "ClanWithId": {
                "value": {
                    "_id": "648091def1bdcdb2a19af6da",
                    "name": "clan",
                    "gameCoins": 260,
                    "tag": "some tag"
                }
            },
            "CustomCharacterNoId": {
                "value": {
                    "unityKey": "somekey",
                    "name": "My custom1",
                    "speed": 10,
                    "resistance": 56,
                    "attack": 28,
                    "defence": 10,
                    "characterClass_id": "6480a26287b5e6ba2a0f630a",
                    "player_id": "64809d1336b0779ede245fc1"
                }
            },
            "CustomCharacterWithId": {
                "value": {
                    "_id": "647f520fa8a94ef3c91cb0e3",
                    "unityKey": "somekey",
                    "name": "My custom1",
                    "speed": 10,
                    "resistance": 56,
                    "attack": 28,
                    "defence": 10,
                    "characterClass_id": "6480a26287b5e6ba2a0f630a",
                    "player_id": "64809d1336b0779ede245fc1"
                }
            },
            "FurnitureNoId": {
                "value": {
                    "name": "furn1",
                    "shape": "shape1",
                    "weight": 12,
                    "material": "mat1",
                    "recycling": "rec1",
                    "unityKey": "unity1",
                    "filename": "file1.txt",
                    "clan_id": "64809d0a36b0779ede245fbf"
                }
            },
            "FurnitureWithId": {
                "value": {
                    "_id": "648ad033409da618287a1ca5",
                    "name": "furn1",
                    "shape": "shape1",
                    "weight": 12,
                    "material": "mat1",
                    "recycling": "rec1",
                    "unityKey": "unity1",
                    "filename": "file1",
                    "clan_id": "648acf02409da618287a1c91"
                }
            },
            "PlayerNoId": {
                "value": {
                    "name": "Anna",
                    "backpackCapacity": 20,
                    "uniqueIdentifier": "1",
                    "clan_id": "64809d0a36b0779ede245fbf"
                }
            },
            "PlayerWithId": {
                "value": {
                    "_id": "648acf12409da618287a1c95",
                    "name": "Anna",
                    "backpackCapacity": 23,
                    "uniqueIdentifier": "1",
                    "clan_id": "648acf02409da618287a1c91"
                }
            },
            "RaidRoomNoId": {
                "value": {
                    "type": 0,
                    "rowCount": 4,
                    "colCount": 6,
                    "player_id": "64809d1336b0779ede245fc1",
                    "clan_id": "64809d0a36b0779ede245fbf"
                }
            },
            "RaidRoomWithId": {
                "value": {
                    "_id": "647f53b5a8a94ef3c91cb104",
                    "type": 0,
                    "rowCount": 4,
                    "colCount": 6,
                    "player_id": "64809d1336b0779ede245fc1",
                    "clan_id": "64809d0a36b0779ede245fbf"
                }
            }
        },
        "securitySchemes": {
            "JWTAuth": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http",
                "description": "Example of header: \nAuthorization: Bearer access_token"
            }
        }
    },
    "security": [
        {
            "JWTAuth": []
        }
    ],
    "tags": [
        {
            "name": "in-development",
            "description": "not yet implemented and also not added to API"
        },
        {
            "name": "changing",
            "description": "already added to API, but now its functionality or docs changing"
        },
        {
            "name": "Profile",
            "description": "profile"
        },
        {
            "name": "Clan",
            "description": "clan"
        },
        {
            "name": "Player",
            "description": "player"
        },
        {
            "name": "SoulHome",
            "description": "soulhome"
        },
        {
            "name": "Room",
            "description": "room"
        },
        {
            "name": "Stock",
            "description": "stock"
        },
        {
            "name": "Item",
            "description": "item"
        },
        {
            "name": "CustomCharacter",
            "description": "CustomCharacter"
        }
    ],
    "externalDocs": {
        "description": "GitHub wikipages",
        "url": "https://github.com/Alt-Org/Altzone-Server/wiki"
    }
}