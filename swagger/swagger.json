{
    "openapi": "3.0.1",
    "info": {
        "title": "Altzone API",
        "version": "1.0.0",
        "description": "This is a description of API for the Altzone game.\nThis swagger document is describing endpoint in more details and includes the request objects structure, examples, authorization rules and any other additional information.\nNotice,  that it does not include common rules and functions, since they are covered on the wikipages in GitHub",
        "x-logo": {
            "url": ""
        }
    },
    "servers": [
        {
            "url": "https://altzone.fi/api",
            "description": "Production",
            "x-last-modified": 1718905376325
        },
        {
            "url": "http://localhost:8080",
            "description": "Local",
            "x-last-modified": 1718899219797
        }
    ],
    "paths": {
        "/clan": {
            "get": {
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Clan": [
                                                    {
                                                        "_id": "667eedc9b3b5bf0f7a840ef1",
                                                        "name": "User2 clan",
                                                        "tag": "tag2",
                                                        "gameCoins": 90,
                                                        "admin_ids": [
                                                            "666720806cc90102f60bd325"
                                                        ],
                                                        "playerCount": 1,
                                                        "itemCount": 0,
                                                        "stockCount": 0,
                                                        "isOpen": true,
                                                        "id": "667eedc9b3b5bf0f7a840ef1"
                                                    },
                                                    {
                                                        "_id": "667bfec6afb8211b4bd8dbff",
                                                        "name": "User1 clan",
                                                        "tag": "tag1",
                                                        "gameCoins": 4,
                                                        "admin_ids": [
                                                            "665df7026bf5b8f670569ea4"
                                                        ],
                                                        "playerCount": 1,
                                                        "itemCount": 0,
                                                        "stockCount": 0,
                                                        "isOpen": true,
                                                        "id": "667bfec6afb8211b4bd8dbff"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Clan",
                                                "modelName": "Clan",
                                                "dataType": "Array",
                                                "dataCount": 2
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 2,
                                                "offset": 0,
                                                "itemCount": 2,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all clans",
                "description": "Read all created Clans. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "Clan object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClanUpdate"
                            },
                            "examples": {
                                "Clan": {
                                    "$ref": "#/components/examples/ClanWithId"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a clan",
                "description": "Update the Clan, which _id is specified in the body. \n\nOnly Clan admins can change the Clan's data, as well as add or remove admins. Notice that while removing Clan admins, its is not allowed to remove all of them, because Clan must have at least one admin.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for Clan admins | \n\n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClanCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Clan": {
                                                    "objectType": "ClanDto",
                                                    "_id": "667eedc9b3b5bf0f7a840ef1",
                                                    "name": "User1 clan",
                                                    "tag": "kek",
                                                    "gameCoins": 90,
                                                    "admin_ids": [
                                                        "666720806cc90102f60bd325"
                                                    ],
                                                    "playerCount": 1,
                                                    "itemCount": 0,
                                                    "stockCount": 0,
                                                    "isOpen": true
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Clan",
                                                "modelName": "Clan",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718901860622
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718901883486
                    },
                    "403": {
                        "$ref": "#/components/responses/403",
                        "x-last-modified": 1718901898221
                    },
                    "409": {
                        "$ref": "#/components/responses/409",
                        "x-last-modified": 1718902008128
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718902019444
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a clan",
                "description": "Create a new Clan. The creator of the Clan becomes its admin. Notice that if Player is creating a new Clan, he/she becomes a member of it, that means that if Player is member of some Clan it can not create a new one, before leaving the old one.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | Player can be in one Clan only at one time => if Player already is in another Clan, he/she can not create a new one | \n\n"
            }
        },
        "/profile": {
            "summary": "user profile",
            "description": "",
            "get": {
                "tags": [
                    "Profile"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Profile": {
                                                    "_id": "667ee778b3b5bf0f7a840ec9",
                                                    "username": "user1"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Profile",
                                                "modelName": "Profile",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Read logged-in user Profile data",
                "description": "Read logged-in user Profile data\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only own |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "put": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Profile"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update user Profile",
                "description": "Update logged-in user Profile data. Notice that only fields needed to be updated should be specified."
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProfileCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Profile"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Profile": {
                                                    "objectType": "ProfileDto",
                                                    "_id": "667ee778b3b5bf0f7a840ec9",
                                                    "username": "user6",
                                                    "Player": {
                                                        "objectType": "PlayerDto",
                                                        "_id": "667ee778b3b5bf0f7a840ecb",
                                                        "name": "User 6",
                                                        "backpackCapacity": 34,
                                                        "uniqueIdentifier": "6",
                                                        "profile_id": "667ee778b3b5bf0f7a840ec9"
                                                    }
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Profile",
                                                "modelName": "Profile",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "operationId": "profile_create",
                "summary": "Create profile",
                "description": "Create a user profile with Player object associated with it. Notice, that it is also possible in some edge cases to create a Profile without Player object assosiated with it, however it is not recommended and API expects that for every Profile there is a Player object created. "
            },
            "delete": {
                "tags": [
                    "Profile"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete Profile",
                "description": "Delete logged-in user's Profile. Notice, that Profile deletion will lead removing all user data, such as Player and CustomCharacters. Since the Player object is assosiated with the Clan, user will be also removed from the Clan. Notice, that if there was nobody in the Clan the Clan with all assosiated objects will be removed. However, in case if the user was admin in this Clan and there are no other admins the user must first set at least one admin for this Clan, overwise the Profile will not be removed and 403 will be returned."
            }
        },
        "/player": {
            "get": {
                "tags": [
                    "Player"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Player": [
                                                    {
                                                        "_id": "6686cb3b71adebdb10f33ffb",
                                                        "name": "User 2",
                                                        "backpackCapacity": 654,
                                                        "uniqueIdentifier": 2,
                                                        "profile_id": "6686cb3b71adebdb10f33ff9"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Player",
                                                "modelName": "Player",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 1,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Read all players",
                "description": "Read all created Players. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "Player object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlayerUpdate"
                            },
                            "examples": {
                                "Player": {
                                    "$ref": "#/components/examples/PlayerWithId"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Player"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a player",
                "description": "Update the Player, which _id is specified in the body. Only Player, which belong to the logged-in Profile can be changed.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | only for Player owner | \n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlayerCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Player"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Player": {
                                                    "objectType": "PlayerDto",
                                                    "_id": "6686cb3b71adebdb10f33ffb",
                                                    "name": "User 2",
                                                    "backpackCapacity": 654,
                                                    "uniqueIdentifier": 2,
                                                    "profile_id": "6686cb3b71adebdb10f33ff9"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Player",
                                                "modelName": "Player",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a player for logged-in user",
                "description": "Create a new Player. This is not recommended way of creating a new Player and it should be used only in edge cases. The recommended way is to create it via /profile POST endpoint.\n\nPlayer is representing an object, which holds data related to game player. This object can be used inside the game for example while joining a Clan. Notice, that the Profile object should not be used inside the game (except for logging-in). \n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | Player can be associated with only one Profile | \n"
            }
        },
        "/player/{_id}": {
            "get": {
                "tags": [
                    "Player"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Player": {
                                                    "_id": "6686cb3b71adebdb10f33ffb",
                                                    "name": "User 2",
                                                    "backpackCapacity": 654,
                                                    "uniqueIdentifier": 2,
                                                    "profile_id": "6686cb3b71adebdb10f33ff9"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Player",
                                                "modelName": "Player",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "summary": "Get Player by _id",
                "description": "Read Player data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "delete": {
                "tags": [
                    "Player"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete Player",
                "description": "Delete Player by its _id field. Notice that only Player, which belongs to loggen-in user Profile can be deleted. In case when the Player is the only admin in some Clan and the Clan has some other Players, the Player can not be removed. User should be asked to first determine at least one admin for the Clan.\n\nAlso, it is not recommended to delete the Player since it can itroduce unexpected behaviour for the user with Profile, but without Player. The better way to remove the Player is do it via /profile DELETE.\n\nPlayer removal basically means removing all data, which is related to the Player: CustomCharacters, Clan, except for the Profile data. In the case when the Profile does not has a Player, user can only login to the system, but can not play the game.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for Player owner |"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "6686cb3b71adebdb10f33ffb"
                        }
                    },
                    "name": "_id",
                    "description": "player _id",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/clan/{_id}": {
            "get": {
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Clan": {
                                                    "_id": "667eedc9b3b5bf0f7a840ef1",
                                                    "name": "User1 clan",
                                                    "tag": "tag1",
                                                    "gameCoins": 90,
                                                    "admin_ids": [
                                                        "666720806cc90102f60bd325"
                                                    ],
                                                    "playerCount": 1,
                                                    "itemCount": 0,
                                                    "stockCount": 0,
                                                    "isOpen": true
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Clan",
                                                "modelName": "Clan",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "summary": "Get Clan by _id",
                "description": "Read Clan data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "delete": {
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete Clan",
                "description": "Delete Clan its _id field. \n\nNotice that only Clan admins can delete the Clan.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for Clan admins |"
            },
            "parameters": [
                {
                    "examples": {
                        "_id": {
                            "value": "667462842425aea94d0f66cb"
                        }
                    },
                    "name": "_id",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/clan/join": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClanJoinCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Join": {
                                                    "objectType": "JoinDto",
                                                    "clan_id": "667bfec6afb8211b4bd8dbff",
                                                    "player_id": "666720806cc90102f60bd325",
                                                    "join_message": "User 2 wants to join"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Join",
                                                "modelName": "Join",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400",
                        "x-last-modified": 1718901860622
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718901883486
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718902019444
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Player requests join to clan",
                "description": "Request to join a Clan. \n\nNotice that if the Clan is open the Player will be joined automatically without admin approval. \n\nNotice that if the Player was in another Clan then he/she will be removed from the old one and if in this Clan was no other Players, it will be removed.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no, but for closed Clans there should be an admin approval first | \n\n"
            }
        },
        "/clan/join/leave": {
            "post": {
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "401": {
                        "$ref": "#/components/responses/401",
                        "x-last-modified": 1718901883486
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500",
                        "x-last-modified": 1718902019444
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Player requests leave the Clan",
                "description": "Request to leave a Clan. \n\nNotice that Player can leave any Clan without admin approval.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | no | \n\n"
            }
        },
        "/clan/default": {
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ClanCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Clan"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Clan": {
                                                    "objectType": "ClanDto",
                                                    "_id": "667ef139b3b5bf0f7a840f0a",
                                                    "name": "User1 clan",
                                                    "tag": "tag1",
                                                    "gameCoins": 90,
                                                    "admin_ids": [
                                                        "666720806cc90102f60bd325"
                                                    ],
                                                    "playerCount": 1,
                                                    "itemCount": 0,
                                                    "stockCount": 0,
                                                    "isOpen": true,
                                                    "Stock": [
                                                        {
                                                            "objectType": "StockDto",
                                                            "_id": "667ef139b3b5bf0f7a840f0d",
                                                            "type": 1,
                                                            "rowCount": 5,
                                                            "columnCount": 5,
                                                            "clan_id": "667ef139b3b5bf0f7a840f0a"
                                                        }
                                                    ]
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Clan",
                                                "modelName": "Clan",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create Clan with Stock and default Items in it",
                "description": "Create a new Clan with Stock containing default Items. Notice that if the Player is already in some other Clan, then he/she can not create a new one."
            }
        },
        "/stock": {
            "get": {
                "tags": [
                    "Stock"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Stock": [
                                                    {
                                                        "_id": "66894fbd4a7b6c993aed1a18",
                                                        "type": 0,
                                                        "rowCount": 4,
                                                        "columnCount": 6,
                                                        "clan_id": "667bfec6afb8211b4bd8dbff"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Stock",
                                                "modelName": "Stock",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 1,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all stocks",
                "description": "Read all created Stocks of all Clans. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "Stock object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StockUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Stock"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a stock",
                "description": "Update the Stock, which _id is specified in the body. \n\nNotice, that only Clan admins to which the Stock belongs to can change the Stock's data.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | only for Clan admins | \n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StockCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Stock"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Stock": {
                                                    "objectType": "StockDto",
                                                    "_id": "66894fbd4a7b6c993aed1a18",
                                                    "type": 0,
                                                    "rowCount": 4,
                                                    "columnCount": 6,
                                                    "clan_id": "667bfec6afb8211b4bd8dbff"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Stock",
                                                "modelName": "Stock",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a stock",
                "description": "Create a new Stock. Stock is representing a place, where Clan items are stored. One Clan may have many Stocks. The Stock may have many Items in it.\n\nNotice, that only Clan's Players can create Stocks both admins and regular members.\n\nThe clan_id field associate the Stock with a Clan. The type field is a enum determining the stock type:\n- None = 0,\n- Public = 1,\n- Proposal = 2\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | Clan members only |\n"
            }
        },
        "/stock/{_id}": {
            "get": {
                "tags": [
                    "Stock"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Stock": {
                                                    "_id": "66894fbd4a7b6c993aed1a18",
                                                    "type": 0,
                                                    "rowCount": 4,
                                                    "columnCount": 6,
                                                    "clan_id": "667bfec6afb8211b4bd8dbff"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Stock",
                                                "modelName": "Stock",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get Stock by _id",
                "description": "Read Stock data by its _id field.\n\nNotice that everybody is able to read all Stock data\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "delete": {
                "tags": [
                    "Stock"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "401": {
                        "$ref": "#/components/responses/401"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete Stock",
                "description": "Delete Stock by its _id field. Notice that only Clan admins can delete the Stock.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for Clan admins |"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "66894fbd4a7b6c993aed1a18"
                        }
                    },
                    "name": "_id",
                    "description": "Stock _id field",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/item": {
            "get": {
                "tags": [
                    "Item"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Item": [
                                                    {
                                                        "_id": "668a765091020196cb10d5a3",
                                                        "id": "668a765091020196cb10d5a3"
                                                    },
                                                    {
                                                        "_id": "668a742d91020196cb10d59c",
                                                        "id": "668a742d91020196cb10d59c"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Item",
                                                "modelName": "Item",
                                                "dataType": "Array",
                                                "dataCount": 2
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 2,
                                                "offset": 0,
                                                "itemCount": 84,
                                                "pageCount": 42
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all items",
                "description": "Read all created Items. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "Item object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Item"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Update an item",
                "description": "Update the Item, which _id is specified in the body.\n\nNotice, that there is no authentication needed to update an Item as well as where are no authorization rules.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | no | \n| Authorization   | no |"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ItemCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Item"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Item": {
                                                    "objectType": "ItemDto",
                                                    "_id": "668a70ce91020196cb10d595",
                                                    "name": "item1",
                                                    "shape": "shape1",
                                                    "weight": 67,
                                                    "material": "mat1",
                                                    "recycling": "rec1",
                                                    "unityKey": "unity1",
                                                    "filename": "file1",
                                                    "rowNumber": 1,
                                                    "columnNumber": 1,
                                                    "isInStock": true,
                                                    "isFurniture": true,
                                                    "stock_id": "668953cd4a7b6c993aed1a36"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Item",
                                                "modelName": "Item",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Create an item",
                "description": "Create a new Item. The Item represents an unit of which the Stock is consists of. Stock may have many Items, but Item can belong to one Stock only.\n\nThe stock_id defines to whch Stock the Item is belongs to.\n\nNotice, that there is no authentication needed to create an Item as well as where are no authorization rules.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | no | \n| Authorization   | no |\n"
            }
        },
        "/item/{_id}": {
            "get": {
                "tags": [
                    "Item"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Item": {
                                                    "_id": "668a70ce91020196cb10d595",
                                                    "name": "item1",
                                                    "shape": "shape1",
                                                    "weight": 67,
                                                    "material": "mat1",
                                                    "recycling": "rec1",
                                                    "unityKey": "unity1",
                                                    "filename": "file1",
                                                    "rowNumber": 1,
                                                    "columnNumber": 1,
                                                    "isInStock": true,
                                                    "isFurniture": true,
                                                    "stock_id": "668953cd4a7b6c993aed1a36"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Item",
                                                "modelName": "Item",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get Item by _id",
                "description": "Read Item data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "delete": {
                "tags": [
                    "Item"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Delete Item",
                "description": "Delete Item by its _id field. \n\nNotice that currently anyone can delete any Item.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "668a70ce91020196cb10d595"
                        }
                    },
                    "name": "_id",
                    "description": "item _id field",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/soulhome": {
            "get": {
                "tags": [
                    "SoulHome"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "SoulHome": [
                                                    {
                                                        "_id": "668c11499470819cf38e374c",
                                                        "id": "668c11499470819cf38e374c"
                                                    },
                                                    {
                                                        "_id": "667ef139b3b5bf0f7a840f2d",
                                                        "id": "667ef139b3b5bf0f7a840f2d"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "SoulHome",
                                                "modelName": "SoulHome",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 2,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all soulhomes",
                "description": "Read all created SoulHomes. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "SoulHome object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SoulHomeUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "SoulHome"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a soulhome",
                "description": "Update the SoulHome, which id is specified in the body. \n\nNotice, that only Clan admins can change the SoulHome's data.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | only for Clan admins |\n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SoulHomeCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "SoulHome"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "SoulHome": {
                                                    "objectType": "SoulHomeDto",
                                                    "_id": "668c0e9f9470819cf38e371c",
                                                    "type": "type1",
                                                    "clan_id": "667bfec6afb8211b4bd8dbff",
                                                    "rooms": []
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "SoulHome",
                                                "modelName": "SoulHome",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a soulhome",
                "description": "Create a new SoulHome. Soulhome consists of Rooms. The clan_id specifies, which Clan owns the SoulHome. There can be one SoulHome for one Clan.\n\nNotice, that only Clan admins can create a SoulHome for the Clan.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | Clan admins only |\n"
            }
        },
        "/soulhome/{_id}": {
            "get": {
                "tags": [
                    "SoulHome"
                ],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "SoulHome": {
                                                    "_id": "668c0e9f9470819cf38e371c",
                                                    "type": "type1",
                                                    "clan_id": "667bfec6afb8211b4bd8dbff",
                                                    "rooms": []
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "SoulHome",
                                                "modelName": "SoulHome",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get SoulHome by _id",
                "description": "Read SoulHome data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "delete": {
                "tags": [
                    "SoulHome"
                ],
                "parameters": [
                    {
                        "name": "_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete SoulHome",
                "description": "Delete SoulHome by its _id field. Notice that only Clan admins can delete the SoulHome.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for Clan admins |"
            }
        },
        "/room": {
            "get": {
                "tags": [
                    "Room"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Room": [
                                                    {
                                                        "_id": "668d6474a9292e300e94c84b",
                                                        "id": "668d6474a9292e300e94c84b"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Room",
                                                "modelName": "Room",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 1,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "summary": "Read all rooms",
                "description": "Read all created Rooms. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "Room object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoomUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Room"
                ],
                "responses": {
                    "200": {
                        "description": "Success, no body"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a room",
                "description": "Update the Room, which id is specified in the body.\n\nNotice, that only Room owners can change the Room's data. The Room owner is the one whos player_id is specified in the Room data.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization  | only for Room owners |\n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RoomCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Room"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Room": {
                                                    "objectType": "RoomDto",
                                                    "_id": "668d6003a9292e300e94c833",
                                                    "floorType": "floor1",
                                                    "wallType": "wall1",
                                                    "isActive": false,
                                                    "roomItems": [],
                                                    "player_id": "665df7026bf5b8f670569ea4",
                                                    "soulHome_id": "667ef139b3b5bf0f7a840f2d"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Room",
                                                "modelName": "Room",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Create a room",
                "description": "Create a new Room. The specified player_id will assosiate the Room with a Player and soulHome_id with SoulHome. One Room can belong to one Player. Many Rooms can belong to one SoulHome. One Room can have many Items.\n\nNotice that isActive will be set to false and roomItems to empty array. These values can be modified with /room PUT request. \n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | no | \n| Authorization   | no | \n"
            }
        },
        "/room/{_id}": {
            "get": {
                "tags": [
                    "Room"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Room": {
                                                    "_id": "668d6003a9292e300e94c833",
                                                    "floorType": "floor1",
                                                    "wallType": "wall1",
                                                    "isActive": false,
                                                    "roomItems": [],
                                                    "player_id": "665df7026bf5b8f670569ea4",
                                                    "soulHome_id": "667ef139b3b5bf0f7a840f2d"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Room",
                                                "modelName": "Room",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get Room by _id",
                "description": "Read Room data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no |"
            },
            "delete": {
                "tags": [
                    "Room"
                ],
                "responses": {
                    "200": {
                        "description": "Success, no body"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete Room",
                "description": "Delete Room by its _id field. Notice that only Room owners can delete the Room.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for Room admins |"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "668d5ffaa9292e300e94c82e"
                        }
                    },
                    "name": "_id",
                    "description": "room _id field",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/itemShop": {
            "get": {
                "tags": [
                    "ItemShop"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "ItemShop": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "_id": {
                                                                "type": "string"
                                                            },
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "lastRestock": {
                                                                "type": "integer"
                                                            },
                                                            "items": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "item_id": {
                                                                            "type": "string"
                                                                        },
                                                                        "isInVoting": {
                                                                            "type": "boolean"
                                                                        },
                                                                        "isSold": {
                                                                            "type": "boolean"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            "__v": {
                                                                "type": "integer"
                                                            },
                                                            "id": {
                                                                "type": "string"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "metaData": {
                                            "type": "object",
                                            "properties": {
                                                "dataKey": {
                                                    "type": "string"
                                                },
                                                "modelName": {
                                                    "type": "string"
                                                },
                                                "dataType": {
                                                    "type": "string"
                                                },
                                                "dataCount": {
                                                    "type": "integer"
                                                }
                                            }
                                        },
                                        "paginationData": {
                                            "type": "object",
                                            "properties": {
                                                "currentPage": {
                                                    "type": "integer"
                                                },
                                                "limit": {
                                                    "type": "integer"
                                                },
                                                "offset": {
                                                    "type": "integer"
                                                },
                                                "itemCount": {
                                                    "type": "integer"
                                                },
                                                "pageCount": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "ItemShop": [
                                                    {
                                                        "_id": "65feaee74ec1b78cc4afc9da",
                                                        "name": "Huonekalukauppa",
                                                        "lastRestock": 1720612774100,
                                                        "items": [
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7da",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7db",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7dc",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7dd",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7de",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7df",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e0",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e1",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e2",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e3",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e4",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e5",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e6",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e7",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e8",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7e9",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ea",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7eb",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ec",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ed",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ee",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7ef",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f0",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f1",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f2",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f3",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            },
                                                            {
                                                                "item_id": "668e77a657e6f7ebbcf3a7f4",
                                                                "isInVoting": false,
                                                                "isSold": false
                                                            }
                                                        ],
                                                        "__v": 2,
                                                        "id": "65feaee74ec1b78cc4afc9da"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "ItemShop",
                                                "modelName": "ItemShop",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 20,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Success, rseponse with body"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get item shops",
                "description": "The ItemShop is an object containing ShopItems. There can be only one ItemShop excisting. The ShopItem is an inner object of the ItemShop, which contains item_id (reference to an Item), isInVoting, isSold and vote_id(reference to a ClanVote).\n\nNotice that ItemShop is created automatically by an API with some default ShopItems in it. Each day ItemShop is reset, so that all default values, which was sold are restored back.\n\nNotice that it is possible to access ItemShop via this endpoint and also via /itemShop/{_id}, the response will be the same (except that this endpoint will have the ItemShop data in an array).\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | "
            }
        },
        "/itemShop/{_id}": {
            "get": {
                "tags": [
                    "ItemShop"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "ItemShop": {
                                                    "type": "object",
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string"
                                                        },
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "lastRestock": {
                                                            "type": "integer"
                                                        },
                                                        "items": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "item_id": {
                                                                        "type": "string"
                                                                    },
                                                                    "isInVoting": {
                                                                        "type": "boolean"
                                                                    },
                                                                    "isSold": {
                                                                        "type": "boolean"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        "__v": {
                                                            "type": "integer"
                                                        },
                                                        "id": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "metaData": {
                                            "type": "object",
                                            "properties": {
                                                "dataKey": {
                                                    "type": "string"
                                                },
                                                "modelName": {
                                                    "type": "string"
                                                },
                                                "dataType": {
                                                    "type": "string"
                                                },
                                                "dataCount": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "ItemShop": {
                                                    "_id": "65feaee74ec1b78cc4afc9da",
                                                    "name": "Huonekalukauppa",
                                                    "lastRestock": 1720612774100,
                                                    "items": [
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7da",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7db",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7dc",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7dd",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7de",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7df",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e0",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e1",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e2",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e3",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e4",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e5",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e6",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e7",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e8",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7e9",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ea",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7eb",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ec",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ed",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ee",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7ef",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f0",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f1",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f2",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f3",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        },
                                                        {
                                                            "item_id": "668e77a657e6f7ebbcf3a7f4",
                                                            "isInVoting": false,
                                                            "isSold": false
                                                        }
                                                    ],
                                                    "__v": 2,
                                                    "id": "65feaee74ec1b78cc4afc9da"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "ItemShop",
                                                "modelName": "ItemShop",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Success, rseponse with body"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get item shop",
                "description": "The ItemShop is an object containing ShopItems. There can be only one ItemShop excisting. The ShopItem is an inner object of the ItemShop, which contains item_id (reference to an Item), isInVoting, isSold and vote_id(reference to a ClanVote).\n\nNotice that ItemShop is created automatically by an API with some default ShopItems in it. Each day ItemShop is reset, so that all default values, which was sold are restored back.\n\nNotice that it is possible to access ItemShop via this endpoint and also via /itemShop, the response will be the same (except that this endpoint will have the ItemShop data as an object).\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |"
            },
            "parameters": [
                {
                    "name": "_id",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/chat": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Chat": [
                                                    {
                                                        "_id": "66912712d191c865ab53da8a",
                                                        "name": "Chat 1",
                                                        "messages": [],
                                                        "__v": 0,
                                                        "id": "66912712d191c865ab53da8a"
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Chat",
                                                "modelName": "Chat",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 1,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all existing chats",
                "description": "Read all created Chats. Remember about the pagination.\n\nNotice, that use of messages array is not advised and can be removed at some point in the future. For accessing messages of the Chat please use the /chat/:_id/message endpoint.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "Chat object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChatUpdate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Update a chat",
                "description": "Update the Chat, which _id is specified in the body.\n\nNotice that currently anybody is able to change any Chat.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | no | \n| Authorization   | no | \n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChatCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Chat": {
                                                    "name": "Chat 1",
                                                    "_id": "66912712d191c865ab53da8a",
                                                    "messages": [],
                                                    "__v": 0,
                                                    "id": "66912712d191c865ab53da8a"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Chat",
                                                "modelName": "Chat",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Create a chat",
                "description": "Create a new Chat. The Chat is an object containing messages.\n\nNotice, that currently there is no restrictions on who can create a Chat.\n\nNotice that the Message objects are inner objects of Chat and can not be used enewhere else than in the Chat. There is also no separate collection for the Message in the DB.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | no | \n| Authorization   | no | \n"
            }
        },
        "/chat/{_id}": {
            "get": {
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Chat": {
                                                    "_id": "66912712d191c865ab53da8a",
                                                    "name": "Chat 1",
                                                    "messages": [],
                                                    "__v": 0,
                                                    "id": "66912712d191c865ab53da8a"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "Chat",
                                                "modelName": "Chat",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get Chat by _id",
                "description": "Read Chat data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no | "
            },
            "delete": {
                "tags": [
                    "Chat"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Delete Chat",
                "description": "Delete Chat by its _id field. \n\nNotice that currently anybody can delete any Chat.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "654fad58fd96261edd2e096f"
                        }
                    },
                    "name": "_id",
                    "description": "Chat _id field",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/chat/{_id}/messages": {
            "get": {
                "tags": [
                    "Message"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "Chat": [
                                                    {
                                                        "id": 15,
                                                        "senderUsername": "user1",
                                                        "content": "message 15",
                                                        "feeling": 1
                                                    }
                                                ]
                                            },
                                            "metaData": {
                                                "dataKey": "Chat",
                                                "modelName": "Chat",
                                                "dataType": "Array",
                                                "dataCount": 1
                                            },
                                            "paginationData": {
                                                "currentPage": 1,
                                                "limit": 20,
                                                "offset": 0,
                                                "itemCount": 1,
                                                "pageCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all messages from the Chat",
                "description": "Read all messages of specified Chat. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessageCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "Message"
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/204"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Create a message",
                "description": "Create a new Message. Message represent the object of message sent by a Player.\n\nNotice that currently there are no authorization required.\n\nNotice, that the messages does not have an usual _id field generated by data base. Instead the Photon id should be used.\n\nNotice that the messages is contained in the array of a Chat collection.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | no | \n| Authorization   | no |\n"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "66912712d191c865ab53da8a"
                        }
                    },
                    "name": "_id",
                    "description": "Chat _id, with which the message is associated",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/customCharacter": {
            "get": {
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "CustomCharacter": {
                                                    "objectType": "CustomCharacterDto",
                                                    "_id": "66939de4db98c5ba6bb192f1",
                                                    "unityKey": "somekey12",
                                                    "name": "My custom5",
                                                    "speed": 37,
                                                    "resistance": 40,
                                                    "attack": 55,
                                                    "defence": 14,
                                                    "characterClass_id": "66939d9f9fdbf76f01d5dbd5",
                                                    "player_id": "665df7026bf5b8f670569ea4"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "CustomCharacter",
                                                "modelName": "CustomCharacter",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Read all custom characters",
                "description": "Read all custom characters. Remember about the pagination\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | yes | \n| Sort | yes |\n| Pagination | yes | ",
                "externalDocs": {
                    "url": "https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests)"
                }
            },
            "put": {
                "requestBody": {
                    "description": "CustomCharacter object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomCharacterUpdate"
                            },
                            "examples": {
                                "CustomCharacter": {
                                    "$ref": "#/components/examples/CustomCharacterWithId"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "200": {
                        "description": "Success, no body"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Update a custom character",
                "description": "Update the CustomCharacter, which _id is specified in the body.\n\nOnly the Player, that owns the CustomCharacter can change it.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | only for character owner |\n"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomCharacterCreate"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/201"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "CustomCharacter": {
                                                    "objectType": "CustomCharacterDto",
                                                    "_id": "66939de4db98c5ba6bb192f1",
                                                    "unityKey": "somekey12",
                                                    "name": "My custom5",
                                                    "speed": 37,
                                                    "resistance": 40,
                                                    "attack": 55,
                                                    "defence": 14,
                                                    "characterClass_id": "66939d9f9fdbf76f01d5dbd5",
                                                    "player_id": "665df7026bf5b8f670569ea4"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "CustomCharacter",
                                                "modelName": "CustomCharacter",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Created"
                    },
                    "400": {
                        "$ref": "#/components/responses/400"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "409": {
                        "$ref": "#/components/responses/409"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Create a custom character",
                "description": "Create a new CustomCharacter. CustomCharacter represents a character of the Player. Player can have many CustomCharacters, CustomCharacter can belong to only one Player.\n\nNotice, that Player can create CustomCharacters only for himself/herself not for other Players.\n\n| Feature / Requirement | Is / Has | \n| -------- | -------- | \n| Authentication | yes | \n| Authorization   | only own |\n"
            }
        },
        "/customCharacter/{_id}": {
            "get": {
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/200_one"
                                },
                                "examples": {
                                    "1": {
                                        "value": {
                                            "data": {
                                                "CustomCharacter": {
                                                    "objectType": "CustomCharacterDto",
                                                    "_id": "66939de4db98c5ba6bb192f1",
                                                    "unityKey": "somekey12",
                                                    "name": "My custom5",
                                                    "speed": 37,
                                                    "resistance": 40,
                                                    "attack": 55,
                                                    "defence": 14,
                                                    "characterClass_id": "66939d9f9fdbf76f01d5dbd5",
                                                    "player_id": "665df7026bf5b8f670569ea4"
                                                }
                                            },
                                            "metaData": {
                                                "dataKey": "CustomCharacter",
                                                "modelName": "CustomCharacter",
                                                "dataType": "Object",
                                                "dataCount": 1
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "404": {
                        "$ref": "#/components/responses/404"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {}
                ],
                "summary": "Get CustomCharacter by id",
                "description": "Read CustomCharacter data by its _id field\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | no |\n| Authorization   | no |\n| Search | no | \n| Sort | no |\n| Pagination | no |"
            },
            "delete": {
                "tags": [
                    "CustomCharacter"
                ],
                "responses": {
                    "200": {
                        "description": "Success, no body"
                    },
                    "403": {
                        "$ref": "#/components/responses/403"
                    },
                    "500": {
                        "$ref": "#/components/responses/500"
                    }
                },
                "security": [
                    {
                        "JWTAuth": []
                    }
                ],
                "summary": "Delete CustomCharacter",
                "description": "Delete CustomCharacter by its _id field. Notice that only the CustomCharacter owner can delete the CustomCharacter.\n\n| Feature / Requirement | Is / Has |\n| -------- | -------- |\n| Authentication | yes |\n| Authorization   | only for CustomCharacter |"
            },
            "parameters": [
                {
                    "examples": {
                        "1": {
                            "value": "66939de4db98c5ba6bb192f1"
                        }
                    },
                    "name": "_id",
                    "description": "CustomCharacter _id field",
                    "schema": {
                        "type": "string"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "200": {
                "description": "Found object(s). The response objects has three fields: data, metaData and paginationData.\nThe data has the requested data. It has an object or array, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.\n\nThe paginationData is the data for pagination. Only on GET requests, when reading many objects\n",
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "metaData": {
                        "type": "object",
                        "properties": {
                            "dataKey": {
                                "description": "collection name",
                                "type": "string"
                            },
                            "modelName": {
                                "description": "model name, usually same as dataKey",
                                "type": "string"
                            },
                            "dataType": {
                                "description": "Object or Array",
                                "type": "string"
                            },
                            "dataCount": {
                                "description": "1 for Object dataType and length if Array",
                                "type": "integer"
                            }
                        }
                    },
                    "paginationData": {
                        "type": "object",
                        "properties": {
                            "currentPage": {
                                "description": "The current page number",
                                "type": "integer"
                            },
                            "limit": {
                                "description": "The limit of items per page",
                                "type": "integer"
                            },
                            "offset": {
                                "description": "The offset of items",
                                "type": "integer"
                            },
                            "itemCount": {
                                "description": "The total number of items",
                                "type": "integer"
                            },
                            "pageCount": {
                                "description": "The total number of pages",
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "201": {
                "description": "Created object. The response objects has two fields: data, metaData.\n\nThe data has the created object data. It has an object inside, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in the data object.",
                "required": [
                    "data",
                    "metaData"
                ],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "metaData": {
                        "type": "object",
                        "properties": {
                            "dataKey": {
                                "description": "collection name",
                                "type": "string"
                            },
                            "modelName": {
                                "description": "model name",
                                "type": "string"
                            },
                            "dataType": {
                                "description": "always has Object value",
                                "type": "string"
                            },
                            "dataCount": {
                                "description": "always has 1 value",
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "APIError": {
                "description": "API error",
                "type": "object",
                "properties": {
                    "statusCode": {
                        "description": "The HTTP status code",
                        "type": "integer",
                        "example": 404
                    },
                    "message": {
                        "description": "The error message",
                        "type": "string",
                        "example": "Cannot GET /api/profile"
                    },
                    "error": {
                        "description": "The error name",
                        "type": "string",
                        "example": "Not Found"
                    }
                },
                "x-last-modified": 1718798371474
            },
            "APIConflictError": {
                "description": "API error",
                "required": [],
                "type": "object",
                "properties": {
                    "statusCode": {
                        "description": "The HTTP status code",
                        "type": "integer",
                        "example": 400
                    },
                    "message": {
                        "description": "An array of error messages",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "password must be a string"
                        ]
                    },
                    "error": {
                        "description": "The error name",
                        "type": "string",
                        "example": "Bad Request"
                    }
                },
                "x-last-modified": 1718798493583
            },
            "ProfileCreate": {
                "type": "object",
                "properties": {
                    "username": {
                        "description": "The username for the Profile, unique",
                        "type": "string",
                        "example": "user1"
                    },
                    "password": {
                        "description": "The password for the Profile",
                        "type": "string",
                        "example": "my_password"
                    },
                    "Player": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "description": "The name of the Player, unique",
                                "type": "string",
                                "example": "User 1"
                            },
                            "backpackCapacity": {
                                "description": "The capacity of the Player's backpack",
                                "type": "integer",
                                "example": 453
                            },
                            "uniqueIdentifier": {
                                "description": "The identifier for the player, unique",
                                "type": "string",
                                "example": "1"
                            }
                        }
                    }
                }
            },
            "ClanUpdate": {
                "required": [
                    "_id"
                ],
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the clan to be updated",
                        "type": "string",
                        "example": "667462842425aea94d0f66cb"
                    },
                    "gameCoins": {
                        "description": "The number of clan coins",
                        "type": "integer",
                        "example": 45
                    },
                    "tag": {
                        "description": "The tag associated with the clan",
                        "type": "string",
                        "example": "my_tag"
                    },
                    "isOpen": {
                        "description": "whenever the clan is open or closed",
                        "type": "boolean",
                        "example": true
                    },
                    "admin_idsToDelete": {
                        "description": "List of admin _ids to delete",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "64df3aad42cbaf850a3f891f"
                        ]
                    },
                    "admin_idsToAdd": {
                        "description": "List of admin _ids to add",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "64df3aad42cbaf850a3f891f"
                        ]
                    }
                }
            },
            "JoinClanReq": {
                "description": "Clan joining request by Player",
                "required": [
                    "clan_id",
                    "player_id"
                ],
                "type": "object",
                "properties": {
                    "clan_id": {
                        "description": "which Clan to join",
                        "type": "string"
                    },
                    "player_id": {
                        "description": "who want to join the Clan",
                        "type": "string"
                    },
                    "join_message": {
                        "description": "optional for open Clans",
                        "type": "string"
                    }
                },
                "example": {
                    "clan_id": "667462842425aea94d0f66cb",
                    "player_id": "666720806cc90102f60bd325",
                    "join_message": "User 2 wants to join"
                }
            },
            "ProfileUpdate": {
                "type": "object",
                "properties": {
                    "username": {
                        "description": "The username for the Profile, unique",
                        "type": "string",
                        "example": "user1"
                    },
                    "password": {
                        "description": "The password for the Profile",
                        "type": "string",
                        "example": "my_password"
                    }
                }
            },
            "200_one": {
                "description": "Found object. The response objects has two fields: data and metaData.\nThe data has the requested data. It has an object inside, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.",
                "type": "object",
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "metaData": {
                        "type": "object",
                        "properties": {
                            "dataKey": {
                                "description": "collection name",
                                "type": "string"
                            },
                            "modelName": {
                                "description": "model name",
                                "type": "string"
                            },
                            "dataType": {
                                "description": "always has Object value",
                                "type": "string"
                            },
                            "dataCount": {
                                "description": "always has 1 value",
                                "type": "integer"
                            }
                        }
                    }
                }
            },
            "PlayerCreate": {
                "description": "",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the Player, unique",
                        "type": "string",
                        "example": "User 1"
                    },
                    "uniqueIdentifier": {
                        "description": "The identifier for the Player, unique",
                        "type": "string",
                        "example": "1"
                    },
                    "backpackCapacity": {
                        "description": "The capacity of the Player's backpack",
                        "type": "integer",
                        "example": 34
                    },
                    "profile_id": {
                        "description": "The id of the associated Profile",
                        "type": "string",
                        "example": "6686cac271adebdb10f33fee"
                    }
                }
            },
            "PlayerUpdate": {
                "description": "",
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the Player, readonly",
                        "type": "string",
                        "example": "6686cb3b71adebdb10f33ffb"
                    },
                    "name": {
                        "description": "The name of the Player, unique",
                        "type": "string",
                        "example": "User 1"
                    },
                    "uniqueIdentifier": {
                        "description": "The identifier for the Player, unique",
                        "type": "string",
                        "example": "1"
                    },
                    "backpackCapacity": {
                        "description": "The capacity of the Player's backpack",
                        "type": "integer",
                        "example": 34
                    },
                    "profile_id": {
                        "description": "The id of the associated Profile",
                        "type": "string",
                        "example": "6686cac271adebdb10f33fee"
                    }
                }
            },
            "ClanCreate": {
                "required": [
                    "name",
                    "tag",
                    "gameCoins"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "description": "name of the clan, unique",
                        "type": "string",
                        "example": "my_clan"
                    },
                    "gameCoins": {
                        "description": "amount of clan coins",
                        "default": 0,
                        "type": "integer",
                        "example": 23
                    },
                    "tag": {
                        "description": "amount of clan coins",
                        "type": "string",
                        "example": "my_tag"
                    },
                    "isOpen": {
                        "description": "whenever the clan is open or closed",
                        "default": true,
                        "type": "boolean",
                        "example": true
                    }
                }
            },
            "ClanJoinCreate": {
                "required": [
                    "clan_id",
                    "player_id"
                ],
                "type": "object",
                "properties": {
                    "clan_id": {
                        "description": "the Clan _id which player want to join",
                        "type": "string",
                        "example": "667bfec6afb8211b4bd8dbff"
                    },
                    "player_id": {
                        "description": "the Player _id who want to join",
                        "type": "integer",
                        "example": "666720806cc90102f60bd325"
                    },
                    "join_message": {
                        "description": "optional message for joining request (for closed Clans only)",
                        "type": "string",
                        "example": "User 2 wants to join"
                    }
                }
            },
            "ClanJoinUpdate": {
                "required": [
                    "_id"
                ],
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "the request _id, to be updated",
                        "type": "string",
                        "example": "666720806cc90102f60bd325"
                    },
                    "clan_id": {
                        "description": "the Clan _id which player want to join",
                        "type": "string",
                        "example": "667bfec6afb8211b4bd8dbff"
                    },
                    "player_id": {
                        "description": "the Player _id who want to join",
                        "type": "integer",
                        "example": "666720806cc90102f60bd325"
                    },
                    "join_message": {
                        "description": "optional message for joining request (for closed Clans only)",
                        "type": "string",
                        "example": "User 2 wants to join"
                    }
                }
            },
            "StockCreate": {
                "description": "",
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The type of the Stock(0-None, 1-Public, 2-Proposal)",
                        "enum": [
                            0,
                            1,
                            2
                        ],
                        "type": "integer",
                        "example": 0
                    },
                    "rowCount": {
                        "description": "The number of rows in the Stock",
                        "type": "integer",
                        "example": 4
                    },
                    "columnCount": {
                        "description": "The number of columns in the Stock",
                        "type": "integer",
                        "example": 6
                    },
                    "clan_id": {
                        "description": "The id of the associated Clan",
                        "type": "string",
                        "example": "667bfec6afb8211b4bd8dbff"
                    }
                }
            },
            "StockUpdate": {
                "description": "",
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the Stock, readonly",
                        "type": "string",
                        "example": "66894fbd4a7b6c993aed1a18"
                    },
                    "type": {
                        "description": "The type of the Stock(0-None, 1-Public, 2-Proposal)",
                        "enum": [
                            0,
                            1,
                            2
                        ],
                        "type": "integer",
                        "example": 0
                    },
                    "rowCount": {
                        "description": "The number of rows in the Stock",
                        "type": "integer",
                        "example": 4
                    },
                    "columnCount": {
                        "description": "The number of columns in the Stock",
                        "type": "integer",
                        "example": 6
                    },
                    "clan_id": {
                        "description": "The id of the associated Clan",
                        "type": "string",
                        "example": "667bfec6afb8211b4bd8dbff"
                    }
                }
            },
            "ItemCreate": {
                "description": "Item creation object",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the Item",
                        "type": "string",
                        "example": "item1"
                    },
                    "shape": {
                        "description": "The shape of the Item",
                        "type": "string",
                        "example": "shape1"
                    },
                    "weight": {
                        "description": "The weight of the Item",
                        "type": "integer",
                        "example": 67
                    },
                    "material": {
                        "description": "The material of the Item",
                        "type": "string",
                        "example": "mat1"
                    },
                    "recycling": {
                        "description": "The recycling information of the Item",
                        "type": "string",
                        "example": "rec1"
                    },
                    "unityKey": {
                        "description": "The unity key of the Item",
                        "type": "string",
                        "example": "unity1"
                    },
                    "filename": {
                        "description": "The filename associated with the Item",
                        "type": "string",
                        "example": "file1"
                    },
                    "rowNumber": {
                        "description": "The row number of the Item in the Stock",
                        "type": "integer",
                        "example": 1
                    },
                    "columnNumber": {
                        "description": "The column number of the Item in the Stock",
                        "type": "integer",
                        "example": 1
                    },
                    "isInStock": {
                        "description": "Whether the Item is in stock",
                        "type": "boolean",
                        "example": true
                    },
                    "isFurniture": {
                        "description": "Whether the Item is furniture",
                        "type": "boolean",
                        "example": true
                    },
                    "stock_id": {
                        "description": "The id of the associated Stock",
                        "type": "string",
                        "example": "668953cd4a7b6c993aed1a36"
                    }
                }
            },
            "ItemUpdate": {
                "description": "Item updating object",
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the Item to update, readonly",
                        "type": "string",
                        "example": "668a70ce91020196cb10d595"
                    },
                    "name": {
                        "description": "The name of the Item",
                        "type": "string",
                        "example": "item1"
                    },
                    "shape": {
                        "description": "The shape of the Item",
                        "type": "string",
                        "example": "shape1"
                    },
                    "weight": {
                        "description": "The weight of the Item",
                        "type": "integer",
                        "example": 67
                    },
                    "material": {
                        "description": "The material of the Item",
                        "type": "string",
                        "example": "mat1"
                    },
                    "recycling": {
                        "description": "The recycling information of the Item",
                        "type": "string",
                        "example": "rec1"
                    },
                    "unityKey": {
                        "description": "The unity key of the Item",
                        "type": "string",
                        "example": "unity1"
                    },
                    "filename": {
                        "description": "The filename associated with the Item",
                        "type": "string",
                        "example": "file1"
                    },
                    "rowNumber": {
                        "description": "The row number of the Item in the Stock",
                        "type": "integer",
                        "example": 1
                    },
                    "columnNumber": {
                        "description": "The column number of the Item in the Stock",
                        "type": "integer",
                        "example": 1
                    },
                    "isInStock": {
                        "description": "Whether the Item is in stock",
                        "type": "boolean",
                        "example": true
                    },
                    "isFurniture": {
                        "description": "Whether the Item is furniture",
                        "type": "boolean",
                        "example": true
                    },
                    "stock_id": {
                        "description": "The id of the associated Stock",
                        "type": "string",
                        "example": "668953cd4a7b6c993aed1a36"
                    }
                }
            },
            "SoulHomeCreate": {
                "description": "",
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The type of the SoulHome",
                        "type": "string",
                        "example": "type1"
                    },
                    "clan_id": {
                        "description": "The id of the associated Clan",
                        "type": "string",
                        "example": "667bfec6afb8211b4bd8dbff"
                    }
                }
            },
            "SoulHomeUpdate": {
                "description": "",
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the SoulHome, readonly",
                        "type": "string",
                        "example": "668c0e9f9470819cf38e371c"
                    },
                    "type": {
                        "description": "The type of the SoulHome",
                        "type": "string",
                        "example": "type1"
                    },
                    "clan_id": {
                        "description": "The id of the associated Clan",
                        "type": "string",
                        "example": "667bfec6afb8211b4bd8dbff"
                    },
                    "addedRooms": {
                        "description": "The rooms to add to the SoulHome",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "667bfec6afb8211b4bd8dbff"
                        ]
                    },
                    "removedRooms": {
                        "description": "The rooms to remove from the SoulHome",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "667bfec6afb8211b4bd8dbff"
                        ]
                    }
                }
            },
            "RoomCreate": {
                "type": "object",
                "properties": {
                    "floorType": {
                        "description": "The type of the floor in the room",
                        "type": "string",
                        "example": "floor1"
                    },
                    "wallType": {
                        "description": "The type of the wall in the room",
                        "type": "string",
                        "example": "wall1"
                    },
                    "player_id": {
                        "description": "The id of the associated Player",
                        "type": "string",
                        "example": "665df7026bf5b8f670569ea4"
                    },
                    "soulHome_id": {
                        "description": "The id of the associated SoulHome",
                        "type": "string",
                        "example": "667ef139b3b5bf0f7a840f2d"
                    }
                }
            },
            "RoomUpdate": {
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the Room, readonly",
                        "type": "string",
                        "example": "668d6003a9292e300e94c833"
                    },
                    "floorType": {
                        "description": "The type of the floor in the room",
                        "type": "string",
                        "example": "floor1"
                    },
                    "wallType": {
                        "description": "The type of the wall in the room",
                        "type": "string",
                        "example": "wall1"
                    },
                    "player_id": {
                        "description": "The id of the associated Player",
                        "type": "string",
                        "example": "665df7026bf5b8f670569ea4"
                    },
                    "soulHome_id": {
                        "description": "The id of the associated SoulHome",
                        "type": "string",
                        "example": "667ef139b3b5bf0f7a840f2d"
                    },
                    "isActive": {
                        "description": "Indicates whether the room is active",
                        "type": "boolean",
                        "example": false
                    },
                    "roomItems": {
                        "description": "List of items in the room",
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "example": []
                    }
                }
            },
            "ChatCreate": {
                "description": "Update an existing Chat",
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The _id of the Chat, readonly",
                        "type": "string",
                        "example": "66912712d191c865ab53da8a"
                    },
                    "name": {
                        "description": "The name of the chat",
                        "type": "string",
                        "example": "Chat 1"
                    },
                    "messages": {
                        "description": "List of messages in the chat",
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "example": []
                    }
                }
            },
            "ChatUpdate": {
                "description": "Create a new Chat",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the chat",
                        "type": "string",
                        "example": "Chat 1"
                    }
                }
            },
            "MessageCreate": {
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "The photon ID of the message",
                        "type": "integer",
                        "example": 15
                    },
                    "senderUsername": {
                        "description": "The username of the message sender",
                        "type": "string",
                        "example": "user1"
                    },
                    "content": {
                        "description": "The content of the message",
                        "type": "string",
                        "example": "message 15"
                    },
                    "feeling": {
                        "description": "The feeling associated with the message (enum from 1-3)",
                        "type": "integer",
                        "example": 1
                    }
                }
            },
            "CustomCharacterCreate": {
                "description": "",
                "required": [
                    "unityKey",
                    "name",
                    "speed",
                    "resistance",
                    "attack",
                    "defence",
                    "characterClass_id",
                    "player_id"
                ],
                "type": "object",
                "properties": {
                    "unityKey": {
                        "description": "The Unity key of the custom character",
                        "type": "string",
                        "example": "somekey12"
                    },
                    "name": {
                        "description": "unique, The name of the custom character",
                        "type": "string",
                        "example": "My custom5"
                    },
                    "speed": {
                        "description": "The speed attribute of the custom character",
                        "type": "integer",
                        "example": 37
                    },
                    "resistance": {
                        "description": "The resistance attribute of the custom character",
                        "type": "integer",
                        "example": 40
                    },
                    "attack": {
                        "description": "The attack attribute of the custom character",
                        "type": "integer",
                        "example": 55
                    },
                    "defence": {
                        "description": "The defence attribute of the custom character",
                        "type": "integer",
                        "example": 14
                    },
                    "characterClass_id": {
                        "description": "reference, The ID of the character class",
                        "type": "string",
                        "example": "66939d9f9fdbf76f01d5dbd5"
                    },
                    "player_id": {
                        "description": "reference, The ID of the player",
                        "type": "string",
                        "example": "665df7026bf5b8f670569ea4"
                    }
                }
            },
            "CustomCharacterUpdate": {
                "description": "",
                "required": [
                    "_id"
                ],
                "type": "object",
                "properties": {
                    "_id": {
                        "description": "The CustomCharacter _id to update",
                        "type": "string",
                        "example": "somekey12"
                    },
                    "unityKey": {
                        "description": "The Unity key of the custom character",
                        "type": "string",
                        "example": "somekey12"
                    },
                    "name": {
                        "description": "unique, The name of the custom character",
                        "type": "string",
                        "example": "My custom5"
                    },
                    "speed": {
                        "description": "The speed attribute of the custom character",
                        "type": "integer",
                        "example": 37
                    },
                    "resistance": {
                        "description": "The resistance attribute of the custom character",
                        "type": "integer",
                        "example": 40
                    },
                    "attack": {
                        "description": "The attack attribute of the custom character",
                        "type": "integer",
                        "example": 55
                    },
                    "defence": {
                        "description": "The defence attribute of the custom character",
                        "type": "integer",
                        "example": 14
                    },
                    "characterClass_id": {
                        "description": "reference, The ID of the character class",
                        "type": "string",
                        "example": "66939d9f9fdbf76f01d5dbd5"
                    },
                    "player_id": {
                        "description": "reference, The ID of the player",
                        "type": "string",
                        "example": "665df7026bf5b8f670569ea4"
                    }
                }
            }
        },
        "responses": {
            "200": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Found object(s). The response objects has three fields: data, metaData and paginationData.\nThe data has the requested data. It has an object or array, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.\n\nThe paginationData is the data for pagination. Only on GET requests, when reading many objects\n",
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                },
                                "metaData": {
                                    "type": "object",
                                    "properties": {
                                        "dataKey": {
                                            "description": "The key in the data object",
                                            "type": "string",
                                            "example": "Clan"
                                        },
                                        "modelName": {
                                            "description": "The name of the model class in data object",
                                            "type": "string",
                                            "example": "Clan"
                                        },
                                        "dataType": {
                                            "description": "The type of the data: Array or Object",
                                            "type": "string",
                                            "example": "Array"
                                        },
                                        "dataCount": {
                                            "description": "The count of data items(dataType is Array)",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                },
                                "paginationData": {
                                    "type": "object",
                                    "properties": {
                                        "currentPage": {
                                            "description": "The current page number",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "limit": {
                                            "description": "The limit of items per page",
                                            "type": "integer",
                                            "example": 20
                                        },
                                        "offset": {
                                            "description": "The offset of items",
                                            "type": "integer",
                                            "example": 0
                                        },
                                        "itemCount": {
                                            "description": "The total number of items",
                                            "type": "integer",
                                            "example": 1
                                        },
                                        "pageCount": {
                                            "description": "The total number of pages",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Success request, response with body. [Here is more about GET requests](https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests))"
            },
            "201": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Created object. The response objects has two fields: data, metaData.\n\nThe data has the created object data. It has an object inside, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.",
                            "required": [],
                            "type": "object"
                        }
                    }
                },
                "description": "Created, response for POST requests with body"
            },
            "204": {
                "description": "Successful request, response with no body"
            },
            "400": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIConflictError"
                        },
                        "example": {
                            "statusCode": 400,
                            "message": [
                                "password must be a string"
                            ],
                            "error": "Bad Request"
                        }
                    }
                },
                "description": "Validation error. Some of the fields are not specified, have wrong data types or any over validation problem",
                "x-last-modified": 1718798714047
            },
            "401": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": {
                            "statusCode": 401,
                            "message": "The access token is not provided. Please add `authorization` field with access token(in bearer token form): `Bearer access-token-here` to request header. The access token you can get from /auth endpoint",
                            "error": "Unauthorized"
                        }
                    }
                },
                "description": "Not authenticated. The Authorization header is not specified or the token is expired. [Here is more about auth](https://github.com/Alt-Org/Altzone-Server/wiki/2.-Authentication-and-authorization)"
            },
            "403": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": {
                            "statusCode": 403,
                            "message": "The logged-in user has no permission to execute update_request action",
                            "error": "Forbidden"
                        }
                    }
                },
                "description": "No permission. The logged-in user has no permission to execute the action. [Here is more about auth](https://github.com/Alt-Org/Altzone-Server/wiki/2.-Authentication-and-authorization)"
            },
            "404": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": {
                            "statusCode": 404,
                            "message": "Can not find any Chat instances",
                            "error": "Not Found"
                        }
                    }
                },
                "description": "Not found. No object(s) found"
            },
            "409": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIConflictError"
                        },
                        "example": {
                            "statusCode": 409,
                            "message": [
                                "Field 'username' with value 'user1' already exists"
                            ],
                            "error": "Conflict"
                        }
                    }
                },
                "description": "Some of the fields are not unique "
            },
            "500": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIError"
                        },
                        "example": {
                            "statusCode": 500,
                            "message": "Internal server error"
                        }
                    }
                },
                "description": "Unexpected error happened. [Please create a new issue here](https://github.com/Alt-Org/Altzone-Server/issues) and specify the endpoint, HTTP method and description if u have any",
                "x-last-modified": 1718799573835
            },
            "200_one": {
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "Found object. The response objects has two fields: data and metaData.\nThe data has the requested data. It has an object inside, which key is a collection name.\n\nThe metaData contains additional data, which can be used for parsing the data object: \ndataKey - collection name, in data object,\ndataType - type of object in data object.",
                            "type": "object",
                            "properties": {
                                "data": {
                                    "type": "object"
                                },
                                "metaData": {
                                    "type": "object",
                                    "properties": {
                                        "dataKey": {
                                            "description": "The key in the data object",
                                            "type": "string",
                                            "example": "Clan"
                                        },
                                        "modelName": {
                                            "description": "The name of the model class in data object",
                                            "type": "string",
                                            "example": "Clan"
                                        },
                                        "dataType": {
                                            "description": "The type of the data: Array or Object",
                                            "type": "string",
                                            "example": "Object"
                                        },
                                        "dataCount": {
                                            "description": "The count of data items(dataType is Array)",
                                            "type": "integer",
                                            "example": 1
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "description": "Success request, response with body. [Here is more about GET requests](https://github.com/Alt-Org/Altzone-Server/wiki/3.-Data-fetching-(GET-requests))"
            }
        },
        "parameters": {
            "_id": {
                "deprecated": false,
                "name": "_id",
                "description": "_id of the object",
                "in": "path",
                "required": true,
                "x-last-modified": 1718961163935
            }
        },
        "examples": {
            "BattleCharacterNoId": {
                "value": {
                    "characterClass_id": "6480a26287b5e6ba2a0f630a",
                    "customCharacter_id": "6480a27887b5e6ba2a0f630d"
                }
            },
            "BattleCharacterWithId": {
                "value": {
                    "_id": "648acf3a409da618287a1ca1",
                    "unityKey": "somekey",
                    "name": "My custom1",
                    "resistance": 56,
                    "speed": 10,
                    "attack": 28,
                    "defence": 10,
                    "characterClassName": "my char",
                    "gestaltCycle": 1,
                    "characterClass_id": "648acec6409da618287a1c8e",
                    "customCharacter_id": "648acf23409da618287a1c98"
                }
            },
            "CharacterClassNoId": {
                "value": {
                    "name": "my char",
                    "gestaltCycle": 1,
                    "speed": 23,
                    "resistance": 45,
                    "attack": 10,
                    "defence": 12
                }
            },
            "CharacterClassWithId": {
                "value": {
                    "_id": "648095322a99de2e3bdee480",
                    "name": "my char",
                    "gestaltCycle": 1,
                    "speed": 23,
                    "resistance": 45,
                    "attack": 10,
                    "defence": 12
                }
            },
            "ClanNoId": {
                "value": {
                    "name": "clan",
                    "gameCoins": 260,
                    "tag": "some tag"
                }
            },
            "ClanWithId": {
                "value": {
                    "_id": "648091def1bdcdb2a19af6da",
                    "name": "clan",
                    "gameCoins": 260,
                    "tag": "some tag"
                }
            },
            "CustomCharacterNoId": {
                "value": {
                    "unityKey": "somekey",
                    "name": "My custom1",
                    "speed": 10,
                    "resistance": 56,
                    "attack": 28,
                    "defence": 10,
                    "characterClass_id": "6480a26287b5e6ba2a0f630a",
                    "player_id": "64809d1336b0779ede245fc1"
                }
            },
            "CustomCharacterWithId": {
                "value": {
                    "_id": "647f520fa8a94ef3c91cb0e3",
                    "unityKey": "somekey",
                    "name": "My custom1",
                    "speed": 10,
                    "resistance": 56,
                    "attack": 28,
                    "defence": 10,
                    "characterClass_id": "6480a26287b5e6ba2a0f630a",
                    "player_id": "64809d1336b0779ede245fc1"
                }
            },
            "FurnitureNoId": {
                "value": {
                    "name": "furn1",
                    "shape": "shape1",
                    "weight": 12,
                    "material": "mat1",
                    "recycling": "rec1",
                    "unityKey": "unity1",
                    "filename": "file1.txt",
                    "clan_id": "64809d0a36b0779ede245fbf"
                }
            },
            "FurnitureWithId": {
                "value": {
                    "_id": "648ad033409da618287a1ca5",
                    "name": "furn1",
                    "shape": "shape1",
                    "weight": 12,
                    "material": "mat1",
                    "recycling": "rec1",
                    "unityKey": "unity1",
                    "filename": "file1",
                    "clan_id": "648acf02409da618287a1c91"
                }
            },
            "PlayerNoId": {
                "value": {
                    "name": "Anna",
                    "backpackCapacity": 20,
                    "uniqueIdentifier": "1",
                    "clan_id": "64809d0a36b0779ede245fbf"
                }
            },
            "PlayerWithId": {
                "value": {
                    "_id": "648acf12409da618287a1c95",
                    "name": "Anna",
                    "backpackCapacity": 23,
                    "uniqueIdentifier": "1",
                    "clan_id": "648acf02409da618287a1c91"
                }
            },
            "RaidRoomNoId": {
                "value": {
                    "type": 0,
                    "rowCount": 4,
                    "colCount": 6,
                    "player_id": "64809d1336b0779ede245fc1",
                    "clan_id": "64809d0a36b0779ede245fbf"
                }
            },
            "RaidRoomWithId": {
                "value": {
                    "_id": "647f53b5a8a94ef3c91cb104",
                    "type": 0,
                    "rowCount": 4,
                    "colCount": 6,
                    "player_id": "64809d1336b0779ede245fc1",
                    "clan_id": "64809d0a36b0779ede245fbf"
                }
            }
        },
        "securitySchemes": {
            "JWTAuth": {
                "scheme": "bearer",
                "bearerFormat": "JWT",
                "type": "http",
                "description": "Example of header: \nAuthorization: Bearer access_token"
            }
        }
    },
    "security": [
        {
            "JWTAuth": []
        }
    ],
    "tags": [
        {
            "name": "in-development",
            "description": "not yet implemented and also not added to API"
        },
        {
            "name": "changing",
            "description": "already added to API, but now its functionality or docs changing"
        },
        {
            "name": "Profile",
            "description": "profile"
        },
        {
            "name": "Clan",
            "description": "clan"
        },
        {
            "name": "Player",
            "description": "player"
        },
        {
            "name": "SoulHome",
            "description": "soulhome"
        },
        {
            "name": "Room",
            "description": "room"
        },
        {
            "name": "Stock",
            "description": "stock"
        },
        {
            "name": "Item",
            "description": "item"
        },
        {
            "name": "CustomCharacter",
            "description": "CustomCharacter"
        }
    ],
    "externalDocs": {
        "description": "GitHub wikipages",
        "url": "https://github.com/Alt-Org/Altzone-Server/wiki"
    }
}